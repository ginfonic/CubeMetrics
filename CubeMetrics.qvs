//CubeMetrics
//Сохраняет модель данных в QVD
sub cbmStoreModel(data_dir, qvd_dir, refs_dir, target, use_db)
	let cbmConnection = use_db;
	call cbmCreateModel('$(data_dir)', '$(qvd_dir)/db_task.qvd', '$(data_dir)/db_task.xlsx', '$(qvd_dir)/db_ubasket.qvd', '$(data_dir)/fbs_data.xlsx', '$(qvd_dir)/db_products.qvd', '$(data_dir)/ptb_prd.xlsx', '$(data_dir)/fbs_milestone.xlsx', '$(qvd_dir)/db_q_monitors.qvd', '$(data_dir)/trf_data.xlsx', '$(qvd_dir)/db_prbr_users.qvd', '$(data_dir)/db_prbr_users.xlsx', '$(qvd_dir)/hr.qvd', '$(data_dir)/trf_hr.xlsx', '$(qvd_dir)/IIcom23.qvd', '$(data_dir)/cbm_ai.xlsx', '$(qvd_dir)/sberbank_market_shares.qvd', '$(data_dir)/grm_data.xlsx', '$(qvd_dir)/db_qlik_sysreact.qvd', '$(data_dir)/cbm_bp.xlsx', '$(qvd_dir)/r.org.qvd', '$(refs_dir)/r.org.xlsx');
	exit sub unless ETL_STEP_ERROR_CODE = 0;
	call storeTemp('cbm_data', target&'_data');
	exit sub unless ETL_STEP_ERROR_CODE = 0;
	drop table cbm_data;
  $(mExitSubOnStepError);
end sub;
    
// Сливает метрику с основной таблицей
sub cbmMergeMetric(metric_code)
	concatenate(cbm_data) load
		org_code,
		cbm_fbs.TBCode as cbm.TBCode,
		cbm_fbs.GOSBCode as cbm.GOSBCode,
		cbm_fbs.TBName as cbm.TBName,
		cbm_fbs.GOSBName as cbm.GOSBName,
		cbm_fbs.MetricID as cbm.MetricID,
		cbm_fbs.MetricName as cbm.MetricName,
		cbm_fbs.MetricDirection as cbm.MetricDirection,
		cbm_fbs.MetricPlanValue as cbm.MetricPlanValue,
		cbm_fbs.ElementType as cbm.ElementType, 
		cbm_fbs.ElementID as cbm.ElementID,
		cbm_fbs.Segment as cbm.Segment,
		cbm_fbs.ReportDate as cbm.ReportDate,
		cbm_fbs.StructLevel as cbm.StructLevel,
		cbm_fbs.DevElementName as cbm.DevElementName,
		cbm_fbs.MetricValue as cbm.MetricValue,
		cbm_fbs.ResultEvaluation as cbm.ResultEvaluation,
		cbm_fbs.DeviationMarker as cbm.DeviationMarker,
		cbm_fbs.LoadID as cbm.LoadID
	resident cbm_fbs_$(metric_code);
	drop table cbm_fbs_$(metric_code); 
end sub;

//Создает модель данных
sub cbmCreateModel(data_dir, tasks_qvd, tasks_xl, fbs_qvd, fbs_xl, fbs_prd_qvd, fbs_prd_xl, fbs_mls_xl, trf_qvd, trf_xl, trf_users_qvd, trf_users_xl, trf_hr_qvd, trf_hr_xl, cbm_ai_qvd, cbm_ai_xl, grm_data_qvd, grm_data_xl, cbm_bp_qvd, cbm_bp_xl, org_qvd, org_xl)
	// Дата расчета
	let v_cbmToday = Today(); //'31.07.2023';

	// Сдвиг по времени
	let c_cbmMShift = 0;
	let c_cbmQShift = 0;
	// Выражения расчета необходимых дат
	set cbmGetPrevMStart = MonthStart(AddMonths('$(v_cbmToday)', -1 + $(c_cbmMShift)));
	set cbmGetPrevMEnd = MonthEnd(AddMonths('$(v_cbmToday)', -1 + $(c_cbmMShift)));
	set cbmGetPrevQStart = QuarterStart(AddMonths('$(v_cbmToday)', -3 + $(c_cbmQShift)));
	set cbmGetPrevQEnd = QuarterEnd(AddMonths('$(v_cbmToday)', -3 + $(c_cbmQShift)));

	// Таблица инициатив
	if '$(cbmConnection)' = '1' then
		//QVD
		cbm_data:
		noconcatenate load *,
			tb_code&If(not(IsNull(multi_gosb)), multi_gosb, If(gosb_code = 0, '', If(gosb_code = 3838, 38, gosb_code))) as org_code
		where multi_gosb <> '';
		noconcatenate load
			tb_code,
			gosb_code,
			id as cbm.ID,
			If((id = 3193) or (id = 2001), 'Региональные проекты', DIRECTION) as cbm.Direction,
			title as cbm.Title,
			Date(Date#(double_control_date, 'DD-MM-YYYY')) as cbm.ControlDate,
			Date(Date#(create_date, 'DD-MM-YYYY')) as cbm.CreateDate,
			Date(Floor(fact_end_date)) as cbm.FactEndDate,
			STATUS as cbm.Status,
			If((Upper(STATUS) = 'ЗАВЕРШЕНА') or (Upper(STATUS) = 'ОТМЕНЕНА'), 
				If((Upper(STATUS) = 'ОТМЕНЕНА') or (Month(Date(Date#(Left(comment, 10), 'DD-MM-YYYY'))) >= 4),
					Year(Date(Date#(Left(comment, 10), 'DD-MM-YYYY'))),
					Year(Date(Date#(Left(comment, 10), 'DD-MM-YYYY'))) - 1
				), 
				Year(Now())
			) as cbm.YearReport,
			plan_effect as cbm.PlanIncome,
			Trim(SubField(gosb_mult, ';')) as multi_gosb
		from [$(tasks_qvd)] (qvd)
		where (tb_code <> 38) and (gosb_code <> 9052) and (parent_id = 0) and 
			((Upper(STATUS) <> 'ОТМЕНЕНА') or ((Upper(STATUS) = 'ОТМЕНЕНА') and (cause = '3')));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		//Excel
		cbm_data:
		noconcatenate load *,
			tb_code&If(not(IsNull(multi_gosb)), multi_gosb, If(gosb_code = 0, '', If(gosb_code = 3838, 38, gosb_code))) as org_code
		where multi_gosb <> '';
		noconcatenate load
			tb_code,
			gosb_code,
			id as cbm.ID,
			If((id = 3193) or (id = 2001), 'Региональные проекты', DIRECTION) as cbm.Direction,
			title as cbm.Title,
			Date(Date#(control_date, 'DD-MM-YYYY')) as cbm.ControlDate,
			Date(Date#(create_date, 'DD-MM-YYYY')) as cbm.CreateDate,
			Date(Floor(fact_end_date)) as cbm.FactEndDate,
			STATUS as cbm.Status,
			If((Upper(STATUS) = 'ЗАВЕРШЕНА') or (Upper(STATUS) = 'ОТМЕНЕНА'), 
				If((Upper(STATUS) = 'ОТМЕНЕНА') or (Month(Date(Date#(Left(comment, 10), 'DD-MM-YYYY'))) >= 4),
					Year(Date(Date#(Left(comment, 10), 'DD-MM-YYYY'))),
					Year(Date(Date#(Left(comment, 10), 'DD-MM-YYYY'))) - 1
				), 
				Year(Now())
			) as cbm.YearReport,
			plan_effect as cbm.PlanIncome,
			Trim(SubField(gosb_mult, ';')) as multi_gosb
		from [$(tasks_xl)] (ooxml, embedded labels, table is Sheet1)
		where (tb_code <> 38) and (gosb_code <> 9052) and (parent_id = 0) and 
			((Upper(STATUS) <> 'ОТМЕНЕНА') or ((Upper(STATUS) = 'ОТМЕНЕНА') and (cause = '3')));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;
	drop fields tb_code, gosb_code, multi_gosb;
	
	// Получает значение MetricPlanValue в зависимости от даты расчета
	set cbmGet10000018MetricPlanValue = Pick(Match(Year(Now())&Num(Month(Now())), '20245', '20246') + 1, 1, 0.5, 0.5);

	// Шаблон метрик
	cbm_metrics_lookup:
	noconcatenate load * inline [
		cbm.MetricID, cbm.MetricName, cbm.MetricDirection, cbm.MetricPlanValue
		10000018, Достаточность КРП для выполнения плана, 1, 
		10000019, PL комплексных региональных проектов на следующий год, 1, 0.7
		10000020, Низкое количество идей КРП на ГОСБ, 1, 0
		10000096, Бизнес-эксперименты, 1, 1
  ];

	// Меняет значение MetricPlanValue на расчитаное
	temp:
	noconcatenate load
		cbm.MetricID, 
		cbm.MetricName, 
		cbm.MetricDirection,
		If(cbm.MetricID = '10000018', 
			$(cbmGet10000018MetricPlanValue), 
			cbm.MetricPlanValue
		) as cbm.MetricPlanValue
	resident cbm_metrics_lookup;
	drop table cbm_metrics_lookup;
	rename table temp to cbm_metrics_lookup;
	// Добавляет метрики к таблице инициатив
	join(cbm_data) load * resident cbm_metrics_lookup;

	// Создает таблицу команды из таблицы инициатив
	cbm_stuff:
	noconcatenate load
		org_code, 
		cbm.MetricID,
		cbm.MetricName, 
		cbm.MetricDirection, 
		cbm.MetricPlanValue,
		// Поля для расчета
		cbm.ID,
		cbm.Status,
		cbm.Direction,
		cbm.YearReport,
		cbm.ControlDate,
		cbm.CreateDate,
		cbm.FactEndDate,
		cbm.Title,
		cbm.PlanIncome
	resident cbm_data;

	// Загружает таблицу оргкодов
	if '$(cbmConnection)' = '1' then
		//QVD
		org:
		noconcatenate load distinct 
			org_code,
			org_tb_code,
			org_gosb_code,
			org_tb_name,
			org_gosb_name,
			org_cluster
		from [$(org_qvd)] (qvd)
		where (org_tb_code <> 38) and (org_gosb_code <> 9052);

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		//Excel
		org:
		noconcatenate load distinct 
			org_code,
			$(ggffT2N(org_tb_code)) as org_tb_code,
			$(ggffT2N(org_gosb_code)) as org_gosb_code,
			$(ggffT2N(org_tb_name)) as org_tb_name,
			$(ggffT2N(org_gosb_name)) as org_gosb_name,
			$(ggffT2N(org_cluster)) as org_cluster
		from [$(org_xl)] (ooxml, embedded labels, table is Sheet1)
		where (org_tb_code <> 38) and (org_gosb_code <> 9052);

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	// Добавляет к таблице команды данные из таблицы оргкодов
	left join (cbm_stuff) load
		org_code,
		org_tb_code,
		org_gosb_code,
		If(IsNull(org_cluster), 'Без группы', org_cluster) as org_cluster
	resident org;

	// Ориентир, исходя из кластера ГОСБ
	set cbmGetClusterMilestone = Pick(Match(org_cluster, 'Группа 1', 'Группа 2', 'Группа 3', 'Группа 4', 'Группа 5') + 1, 0, 2, 2, 1, 1, 1);

	// Для метрик кроме 10000020 группирует по ГОСБ с кластером и метрике в первую таблицу
	temp1:
	noconcatenate load
		org_code, 
		org_cluster,
		cbm.MetricID,
		cbm.MetricName, 
		cbm.MetricDirection, 
		cbm.MetricPlanValue, 
		// Значение метрики
		Pick(Match(cbm.MetricID, 10000018, 10000019, 10000096),
			//10000018
			Count(If(
				((cbm.Status = 'Завершена') or (cbm.Status = 'В работе') or 
					(cbm.Status = 'Согласование закрытия проекта') or (cbm.Status = 'Согласование ЗНИ')
				) and
				(cbm.Direction = 'КРП') and (cbm.YearReport = 2024) and (cbm.ControlDate < '02.02.2025'),
				cbm.ID
			)) /
			$(cbmGetClusterMilestone),
			//10000019
			Count(If(
				((cbm.Status = 'Завершена') or (cbm.Status = 'В работе') or
					(cbm.Status = 'Согласование закрытия проекта') or (cbm.Status = 'Согласование ЗНИ')
				) and
				((cbm.Direction = 'КРП') or (cbm.Direction = 'Бизнес идеи (КРП)') or 
					(cbm.Direction = 'Бизнес-эксперименты') or (cbm.Direction = 'ИИ-трансформация')) and
				(cbm.YearReport = 2023) and
				((cbm.ControlDate >= '02.02.2024') and (cbm.ControlDate < '02.02.2025')),
				cbm.ID
			)) /
			$(cbmGetClusterMilestone),
			//10000096
			Count(If(
				((cbm.Direction = 'Бизнес-эксперименты') or (cbm.Direction = 'Бизнес-эксперименты ТБ')) and
				((cbm.Status = 'В работе') or ((cbm.Status = 'Завершена') and (cbm.YearReport = 2024) and (cbm.FactEndDate > '01.01.2024'))),
				cbm.ID
			))
		) as cbm.MetricValue,
		// Комментарий
		Pick(Match(cbm.MetricID, 10000018, 10000019, 10000096),
			//10000018
			'1)	Количество КРП, реализуемых в текущем году: ' &
			Count(If(
				((cbm.Status = 'В работе') or (cbm.Status = 'Согласование закрытия проекта') or (cbm.Status = 'Согласование ЗНИ')) and
				(cbm.Direction = 'КРП') and
				(cbm.YearReport = 2024) and
				(cbm.ControlDate < '02.02.2025'),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'2)	Количество КРП, завершенных в текущем году: ' &
			Count(If(
				(cbm.Status = 'Завершена') and
				(cbm.Direction = 'КРП') and
				(cbm.YearReport = 2024) and
				(cbm.ControlDate < '02.02.2025'),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'3)	Ориентир КРП на текущий год: ' & $(cbmGetClusterMilestone) &' шт.',
			//10000019
			'1)	Количество идей КРП на следующий год: ' &
			Count(If(
				(cbm.Status = 'В работе') and
				(cbm.Direction = 'Бизнес идеи (КРП)') and
				(cbm.YearReport = 2023) and
				((cbm.ControlDate >= '02.02.2024') and (cbm.ControlDate < '02.02.2025')),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'2)	Количество КРП, реализуемых в следующем году: ' &
			Count(If(
				((cbm.Status = 'В работе') or (cbm.Status = 'Согласование закрытия проекта') or (cbm.Status = 'Согласование ЗНИ')) and
				(cbm.Direction = 'КРП') and
				(cbm.YearReport = 2023) and
				((cbm.ControlDate >= '02.02.2024') and (cbm.ControlDate < '02.02.2025')),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'3)	Количество бизнес-экспериментов, реализуемых в следующем году: ' &
			Count(If(
				((cbm.Status = 'В работе') or (cbm.Status = 'Согласование закрытия проекта') or (cbm.Status = 'Согласование ЗНИ')) and
				(cbm.Direction = 'Бизнес-эксперименты') and
				(cbm.YearReport = 2023) and
				((cbm.ControlDate >= '02.02.2024') and (cbm.ControlDate < '02.02.2025')),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'4)	Количество ИИ-трансформаций, реализуемых в следующем году: ' &
			Count(If(
				((cbm.Status = 'В работе') or (cbm.Status = 'Согласование закрытия проекта') or (cbm.Status = 'Согласование ЗНИ')) and
				(cbm.Direction = 'ИИ-трансформация') and
				(cbm.YearReport = 2023) and
				((cbm.ControlDate >= '02.02.2024') and (cbm.ControlDate < '02.02.2025')),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'5)	Ориентир КРП на текущий год: ' & 
			$(cbmGetClusterMilestone) & ' шт. (считаем, что план на следующий год равен текущему)',
			//10000096
			Concat(If(
				((cbm.Direction = 'Бизнес-эксперименты') or (cbm.Direction = 'Бизнес-эксперименты ТБ')) and
				((cbm.Status = 'В работе') or ((cbm.Status = 'Завершена') and (cbm.YearReport = 2024) and (cbm.FactEndDate > '01.01.2024'))),
				cbm.Title&'. Плановый эффект - '&Num(cbm.PlanIncome, '$(ggffNUM)')&' руб. Контрольная дата - '&cbm.ControlDate&'.'
			), chr(13))
		) as cbm.DevElementName
	resident cbm_stuff
	where not(IsNull(org_gosb_code)) and (cbm.MetricID <> 10000020)
	group by org_code, org_cluster, cbm.MetricID, cbm.MetricName, cbm.MetricDirection, cbm.MetricPlanValue;

	// Для метрики 10000020 группирует по ТБ во вторую таблицу
	temp2:
	noconcatenate load
		org_tb_code, 
		cbm.MetricID, 
		cbm.MetricName, 
		cbm.MetricDirection, 
		cbm.MetricPlanValue, 
		// Значение метрики 10000020
		(
			Count(If(
				((cbm.Status =  'Завершена') or (cbm.Status = 'В работе')) and
				((cbm.Direction = 'КРП') or (cbm.Direction = 'Бизнес идеи (КРП)')) and
				(cbm.YearReport = 2023) and
				(cbm.ControlDate < '02.02.2024'),
				cbm.ID
			)) / 
			// Считает только коды ГОСБ
			Count(distinct org_gosb_code)
		) as cbm.MetricValue,
		// Комментарий метрики 10000020
		(
			'1)	Количество идей КРП на текущий год: ' &
			Count(If(
				((cbm.Status = 'Завершена') or (cbm.Status = 'В работе')) and
				(cbm.Direction = 'Бизнес идеи (КРП)') and
				(cbm.YearReport = 2023) and
				(cbm.ControlDate < '02.02.2024'),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'2)	Количество КРП в текущем году в статусе "В работе" и "Завершена": '&
			Count(If(
				((cbm.Status = 'Завершена') or (cbm.Status = 'В работе')) and
				(cbm.Direction = 'КРП') and
				(cbm.YearReport = 2023) and
				(cbm.ControlDate < '02.02.2024'),
				cbm.ID
			)) & ' шт. '& chr(13) &
			'3)	ГОСБ: ' & 
			Count(distinct org_gosb_code) & ' шт.'
		) as cbm.DevElementName,
		org_tb_code as org_code
	resident cbm_stuff
	where not(IsNull(org_tb_code)) and (cbm.MetricID = 10000020)
	group by org_tb_code, cbm.MetricID, cbm.MetricName, cbm.MetricDirection, cbm.MetricPlanValue;
	drop table cbm_stuff;
	rename table temp2 to cbm_stuff;

	// Сливает обе таблицы в готовую таблицу команды
	concatenate(cbm_stuff) load
		org_code,
		cbm.MetricID, 
		cbm.MetricName, 
		cbm.MetricDirection, 
		cbm.MetricPlanValue,
		cbm.MetricValue,
		If(cbm.DevElementName = '', '-', cbm.DevElementName) as cbm.DevElementName
	resident temp1;
	drop table temp1;

	// Создает матрицу ТБ/ГОСБ
	cbm_mtx:
	noconcatenate load org_code resident org where not IsNull(org_tb_code);

	// Добавляет к матрице метрики
	join(cbm_mtx) load 
		cbm.MetricID, 
		cbm.MetricName, 
		cbm.MetricDirection, 
		cbm.MetricPlanValue
	resident cbm_metrics_lookup;
	drop table cbm_metrics_lookup;

	// Добавляет к таблице команды нужную часть матрицы
	concatenate(cbm_stuff) load * resident cbm_mtx
	where ((Len(org_code) > 2) and (cbm.MetricID <> 10000020)) or 
		((Len(org_code) = 2) and (cbm.MetricID = 10000020));
	drop table cbm_mtx;

	// Сливает таблицу команды с матрицей
	temp:
	noconcatenate load
		org_code, 
		cbm.MetricID, 
		cbm.MetricName, 
		cbm.MetricDirection, 
		cbm.MetricPlanValue, 
		Sum(cbm.MetricValue) as cbm.MetricValue,
		Only(cbm.DevElementName) as cbm.DevElementName
	resident cbm_stuff
	group by org_code, cbm.MetricID, cbm.MetricName, cbm.MetricDirection, cbm.MetricPlanValue;
	drop table cbm_stuff;
	rename table temp to cbm_stuff;

	// Убирает из таблицы инициатив записи с пустым DevElementTitle
	temp:
	noconcatenate load * where not(IsNull(cbm.DevElementName));
	// Добавляет в таблицу инициатив нужные поля, удаляя ненужные
	noconcatenate load
		org_code,
		cbm.MetricID, 
		cbm.MetricName, 
		cbm.MetricDirection, 
		cbm.MetricPlanValue, 
		'ELEMENT' as cbm.StructLevel,
		// Имя элемента
		Pick(Match(cbm.MetricID, 10000018, 10000019),
			//10000018
			If((cbm.Direction = 'КРП') and 
					((cbm.Status = 'В работе') or (cbm.Status = 'Завершена') or (cbm.Status = 'Согласование закрытия проекта') or (cbm.Status = 'Согласование ЗНИ')) and 
					(cbm.YearReport = '2024') and (cbm.ControlDate < Date('02.02.2025')),
				cbm.Direction & ': '& cbm.Title & ', срок: ' & cbm.ControlDate & ', статус: ' & cbm.Status),
			//10000019
			If(((cbm.Direction = 'Бизнес идеи (КРП)') or (cbm.Direction = 'КРП') or 
						(cbm.Direction = 'Бизнес-эксперименты') or (cbm.Direction = 'ИИ-трансформация')
					) and 
					((cbm.Status = 'В работе') or (cbm.Status = 'Завершена')) and 
					(cbm.YearReport = '2023') and (cbm.ControlDate > Date('02.02.2024')) and (cbm.ControlDate < Date('02.02.2025')),
				cbm.Direction & ': ' & cbm.Title & ', срок: ' & cbm.ControlDate & ', статус: ' & cbm.Status)
		) as cbm.DevElementName
	resident cbm_data;
	drop table cbm_data;
	rename table temp to cbm_data;

	// Добавляет в таблицу инициатив значение и единицу измерения метрики из таблицы команды
	left join(cbm_data) load
		org_code,
		cbm.MetricID,
		cbm.MetricValue
	resident cbm_stuff;

	// Сливает таблицу команды с таблицей инициатив
	concatenate(cbm_data) load *, 'STUFF' as cbm.StructLevel resident cbm_stuff;
	drop table cbm_stuff;

	// Расчитывает значение перцентилей 0,75 и 0,25
	left join(cbm_data) load
		cbm.MetricID,
		Fractile(cbm.MetricValue, 0.75) as cbm.Percentile75,
		Fractile(cbm.MetricValue, 0.25) as cbm.Percentile25
	resident cbm_data
	where (
		(cbm.StructLevel = 'STUFF') and 
		(
			((cbm.MetricID = 10000015) and (cbm.MetricValue >= cbm.MetricPlanValue)) or 
			((cbm.MetricID = 10000017) and (cbm.MetricValue > cbm.MetricPlanValue)) or 
			((cbm.MetricID = 10000018) and (cbm.MetricValue >= cbm.MetricPlanValue)) or 
			((cbm.MetricID = 10000019) and (cbm.MetricValue >= cbm.MetricPlanValue)) or
			(cbm.MetricID = 10000020) or
			((cbm.MetricID = 10000096) and (cbm.MetricValue >= cbm.MetricPlanValue))
		)
	)
	group by cbm.MetricID;

	temp:
	noconcatenate load *,
		// Добавляет пустые и стандартные поля
		Null() as cbm.ElementType, 
		Null() as cbm.ElementID,
		'EXT_FILE' as cbm.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm.ReportDate,
		// Рассчитывает поле LOAD_ID из метрики и текущей даты
		If((cbm.MetricID = 10000018) or (cbm.MetricID = 10000019),
			cbm.MetricID&'_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD'),
			cbm.MetricID&'_'&Date($(cbmGetPrevMStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevMEnd), 'YYYYMMDD')
		) as cbm.LoadID, 
		// Рассчитывает поле DEVIATION_MARKER
		If(not $(ggffIsEmpty(cbm.MetricValue)),
			Pick(Match(cbm.MetricID, 10000018, 10000019, 10000020, 10000096), 
				// 10000018
				If((cbm.MetricValue < cbm.MetricPlanValue), 
					1, 
					If((cbm.MetricValue > cbm.Percentile75),
						13,
						0
					)
				),
				// 10000019
				If((cbm.MetricValue < cbm.MetricPlanValue), 
					1, 
					If((cbm.MetricValue > cbm.Percentile75),
						13,
						0
					)
				),
				// 10000020
				If((cbm.MetricValue > cbm.Percentile75), 
					13, 
					If((cbm.MetricValue <= cbm.Percentile25) and ((cbm.Percentile25 <> 0) or (cbm.Percentile75 <> 0)),
						1,
						0
					)
				),
				// 10000096
				If((cbm.MetricValue < cbm.MetricPlanValue), 
					1, 
					If((cbm.MetricValue > cbm.Percentile75),
						13,
						0
					)
				)
			)
		) as cbm.DeviationMarker,
		// Оценка результата
		If(not $(ggffIsEmpty(cbm.MetricValue)),
			Pick(Match(cbm.MetricID, 10000018, 10000019, 10000020, 10000096),		
				// 10000018
				'(Факт - <b>'&Num(cbm.MetricValue, '$(ggffPCT)')&
				'</b>. Цель - не меньше <b>'&Num(cbm.MetricPlanValue, '$(ggffPCT)')&
				'</b>. Ориентир - больше <b>'&Num(cbm.Percentile75, '$(ggffPCT)')&'</b>)',
				// 10000019
				'(Факт - <b>'&Num(cbm.MetricValue, '$(ggffPCT)')&
				'</b>. Цель - не меньше <b>'&Num(cbm.MetricPlanValue, '$(ggffPCT)')&
				'</b>. Ориентир - больше <b>'&Num(cbm.Percentile75, '$(ggffPCT)')&'</b>)',
				// 10000020
				'(Факт - <b>'&Num(cbm.MetricValue, '$(ggffPCT)')&
				'</b>. Цель - больше <b>'&Num(cbm.Percentile25, '$(ggffPCT)')&
				'</b>. Ориентир - больше <b>'&Num(cbm.Percentile75, '$(ggffPCT)')&'</b>)',
				// 10000096
				'(Факт - <b>'&Num(cbm.MetricValue, '$(ggffPCT)')&
				'</b>. Цель - не меньше <b>'&Num(cbm.MetricPlanValue, '$(ggffPCT)')&
				'</b>. Ориентир - больше <b>'&Num(cbm.Percentile75, '$(ggffPCT)')&'</b>)'
			)
		) as cbm.ResultEvaluation
	resident cbm_data;
	drop table cbm_data;
	rename table temp to cbm_data;
	drop fields cbm.Percentile75, cbm.Percentile25;

	//Добавляет параметры ГОСБ
	left join(cbm_data) load
		org_code,
		org_tb_code as cbm.TBCode,
		org_gosb_code as cbm.GOSBCode,
		org_tb_name as cbm.TBName,
		org_gosb_name as cbm.GOSBName
	resident org;

	////////////////////////////////////////////////////////////////////////////////
	// Данные с платформы

	// Справочник допустимых продуктов
	product_lookup:
	noconcatenate load * inline [
		product_id
		25
		26
		37
		63
		68
		101
		115
		165
		166
		168
		169
		175
		176
		179
		185
		192
		193
		220
		226
		229
		230
		232
		235
	];

	// Считает число продуктов
	product_lookup_count:
	noconcatenate load Count(product_id) as product_count resident product_lookup;
	join(product_lookup) load product_count resident product_lookup_count;
	drop table product_lookup_count;

	// Получает продукты
	if '$(cbmConnection)' = '1' then
		//QVD
		products:
		noconcatenate load  
			id as product_id,
			// crm_id,
			name as product
			// dzo,
			// status,
			// segment,
			// industry as industry,
			// role_upr,
			// description,
			// visible,
			// create_date,
			// update_date,
			// draft,
			// tb,
			// gosb,
			// metric,
			// "group",
			// attachment,
			// "type",
			// consist
		from [$(fbs_prd_qvd)] (qvd)
		//Только тираж
		where (status = 'Тираж');

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		//Excel
		products:
		noconcatenate load 
		  // attachment,
			// consist,
			// create_date,
			// crm_id,
			// description,
			// draft,
			// dzo,
			// gosb,
			// "group",
			id as product_id,
			// industry as industry,
			// metric,
			name as product
			// role_upr,
			// segment,
			// status,
			// tb,
			// "type",
			// update_date,
			// visible
		from [$(fbs_prd_xl)] (ooxml, embedded labels, table is Sheet1)
		//Только тираж
		where (status = 'Тираж');

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	// Добавляет поля из загруженного справочника в справочник продуктов
	left join(product_lookup) load
		product_id,
		product
	resident products;
	drop table products;

	//Условия непустых записей
	set cbmNotEmptyRecords = 
		not(IsNull($1)) and ($1 <> '') and ($1 <> '-') and 
		not(IsNull($2)) and ($2 <> '') and ($2 <> '-') and 
		not(IsNull($3)) and ($3 <> '') and ($3 <> '-');

	//Проверяет квартал и год записи, прошлые ли это кварталы текущего года относительно текущего квартала: $1 - год, $2 - квартал
	set cbmIsPastQuarterOnlyThisYear = (($1 = Year('$(v_cbmToday)')) and ($2 < $(ggffQuarterNo('$(v_cbmToday)'))));
	//Проверяет квартал и год записи, текущий или будущие ли это кварталы текущего года относительно текущего: $1 - год, $2 - квартал
	set cbmIsThisAndFutureQuarterThisYear = (($1 = Year('$(v_cbmToday)')) and ($2 >= $(ggffQuarterNo('$(v_cbmToday)'))));
	//Проверяет квартал и год записи, прошлые ли это кварталы текущего года относительно текущего квартала
	//(весь прошлый год, если первый квартал): $1 - год, $2 - квартал
	set cbmIsPastQuarterThisAndPrevYear = 
		If($(ggffQuarterNo('$(v_cbmToday)')) = 1,
			($1 = Year('$(v_cbmToday)') - 1),
			(($1 = Year('$(v_cbmToday)')) and ($2 < $(ggffQuarterNo('$(v_cbmToday)'))))
		);
	//Проверяет квартал и год записи, прошлые ли это кварталы за всю историю относительно текущего квартала: $1 - год, $2 - квартал
	set cbmIsPastQuarterEver = (($1 < Year('$(v_cbmToday)')) or (($1 = Year('$(v_cbmToday)')) and ($2 < $(ggffQuarterNo('$(v_cbmToday)')))));
	//Проверяет квартал и год записи, прошлые ли это кварталы за всю историю относительтно предыдущего: $1 - год, $2 - квартал
	set cbmIsPrevPastQuarterEver = 
		If(($(ggffQuarterNo('$(v_cbmToday)')) > 2),
			// Сейчас 3 или 4 квартал: прошлые годы или этот, но запись старше предыдущего квартала
			(($1 < Year('$(v_cbmToday)')) or (($1 = Year('$(v_cbmToday)')) and ($2 < ($(ggffQuarterNo('$(v_cbmToday)')) - 1)))),
			If($(ggffQuarterNo('$(v_cbmToday)')) = 2,
				// Сейчас 2 квартал: прошлые годы 
				($1 < Year('$(v_cbmToday)')),
				// Сейчас 1 квартал: позапрошлные годы или прошлый, но запись старше 4 квартала
				(($1 < (Year('$(v_cbmToday)') - 1)) or (($1 = (Year('$(v_cbmToday)') - 1)) and ($2 < 4)))
			)
		);
	// Проверяет год записи, текущий ли это год: 1 - год
	set cbmIsThisYear = ($1 = Year('$(v_cbmToday)'));
	// Проверяет квартал записи, четвертый ли он текущего года: $1 - год, $2 - квартал
	set cbmIs4QThisYear = (($1 = Year('$(v_cbmToday)')) and ($2 = 4));
	// Проверяет, не ГЧП ли продукт: $1 - продукт
	set cbmIsNotGChP = (Left($1, 3) <> 'ГЧП');
	// Проверяет статус реализации
	set cbmIsRealised = (($1 = 134) or ($1 = 777));
	// Начало года
	set cbmYearStart = Date(YearStart('$(v_cbmToday)'));
	// Конец предыдущего квартала
	set cbmPrevQuarterEnd = Date(QuarterEnd(AddMonths('$(v_cbmToday)', -3)));
	// Даты от начала гола до конца предыдущего квартала
	set cbmPastQuarterOnlyThisYearDates = //$(cbmYearStart)&'-'&$(cbmPrevQuarterEnd);
		If($(cbmYearStart) < $(cbmPrevQuarterEnd),
			$(cbmYearStart)&'-'&$(cbmPrevQuarterEnd),
			'неприменимо'
		);
	// Начало текущего квартала
	set cbmThisQuarterStart = Date(QuarterStart('$(v_cbmToday)'));
	// Конец года
	set cbmYearEnd = Date(YearEnd('$(v_cbmToday)'));
	// Даты от начала текущего квартала до конца года
	set cbmThisAndFutureQuarterThisYearDates = $(cbmThisQuarterStart)&'-'&$(cbmYearEnd);

	//Получает данные
	if '$(cbmConnection)' = '1' then
		//QVD
		cbm_fbs:
		noconcatenate load
			// tb_code,
			// tb,
			// gosb_code,
			// gosb,
			$(ggffCreateOrgCode(tb_code, gosb_code)) as org_code,
			// "type",
			// basket_id,
			product as cbm_fbs.Product,
			// If(IsNull(city) or (city = '') or (city = '-'),
			// 	'ГОСБ',
			// 	city 
			// ) as cbm_fbs.City,
			// initiative_id,
			// chain,
			// object,
			// id_basket_item,
			If($(cbmIsPastQuarterOnlyThisYear("year", quarter)), "fact", 0) as cbm_fbs.FactPastQuarters,
			If($(cbmIsThisAndFutureQuarterThisYear("year", quarter)), plan, 0) as cbm_fbs.PlanThisAndFutureQuarters,
			If($(cbmIsThisYear("year")), plan, 0) as cbm_fbs.PlanThisYear,
			If($(cbmIs4QThisYear("year", quarter)), plan, 0) as cbm_fbs.Plan4QThisYear,
			If($(cbmIsPastQuarterThisAndPrevYear("year", quarter)) and $(cbmIsNotGChP(product)), income, 0) as cbm_fbs.IncomeFact,
			If($(cbmIsPastQuarterEver("year", quarter)) and $(cbmIsRealised(status)), "fact", 0) as cbm_fbs.Fact,
			If($(cbmIsPrevPastQuarterEver("year", quarter)) and $(cbmIsRealised(status)), "fact", 0) as cbm_fbs.PrevFact
			// "year",
			// quarter,
			// $(ggffGetDateFromQY(quarter, "year")) as cbm_fbs.Date,
			// status as cbm_fbs.Status,
			// income_plan as cbm_fbs.IncomePlan,
			// template_id as cbm_fbs.TemplateID,
  		// template_title as cbm_fbs.TemplateTitle,
			// "comment" as cbm_fbs.Comments,
			// // "max",
			// Date(create_date) as cbm_fbs.CreateDate,
			// Date(update_date) as cbm_fbs.UpdateDate
		from [$(fbs_qvd)] (qvd)
		//Только не пустые значения со статусом Запланировано или Реализовано 
		where $(cbmNotEmptyRecords(tb_code, gosb_code, product)) and ("year" <> 0) and (quarter <> 0) and 
			((status = 127) or (status = 128) or (status = 129) or (status = 130) or (status = 131) or (status = 134) or (status = 777));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		//Excel
		cbm_fbs:
		noconcatenate load 
			// tb_code,
			// tb,
			// gosb_code,
			// gosb,
			$(ggffCreateOrgCode(tb_code, gosb_code)) as org_code,
			// "type",
			// basket_id,
			product as cbm_fbs.Product,
			// If(IsNull(city) or (city = '') or (city = '-'),
			// 	'ГОСБ',
			// 	city 
			// ) as cbm_fbs.City,
			// initiative_id,
			// "max",
			// chain,
			// object,
			// id_basket_item,
			If($(cbmIsPastQuarterOnlyThisYear("year", quarter)), "fact", 0) as cbm_fbs.FactPastQuarters,
			If($(cbmIsThisAndFutureQuarterThisYear("year", quarter)), plan, 0) as cbm_fbs.PlanThisAndFutureQuarters,
			If($(cbmIsThisYear("year")), plan, 0) as cbm_fbs.PlanThisYear,
			If($(cbmIs4QThisYear("year", quarter)), plan, 0) as cbm_fbs.Plan4QThisYear,
			If($(cbmIsPastQuarterThisAndPrevYear("year", quarter)) and $(cbmIsNotGChP(product)), income, 0) as cbm_fbs.IncomeFact,
			If($(cbmIsPastQuarterEver("year", quarter)) and $(cbmIsRealised(status)), "fact", 0) as cbm_fbs.Fact,
			If($(cbmIsPrevPastQuarterEver("year", quarter)) and $(cbmIsRealised(status)), "fact", 0) as cbm_fbs.PrevFact
			// "year",
			// quarter,
			// $(ggffGetDateFromQY(quarter, "year")) as cbm_fbs.Date,
			// status as cbm_fbs.Status,
			// income_plan as cbm_fbs.IncomePlan,
			// If("comment" = '-', '', "comment") as cbm_fbs.Comments,
			// Date(create_date) as cbm_fbs.CreateDate,
			// Date(update_date) as cbm_fbs.UpdateDate,
			// template_id as cbm_fbs.TemplateID,
  		// template_title as cbm_fbs.TemplateTitle
		from [$(fbs_xl)] (ooxml, embedded labels, table is Sheet1)
		//Только не пустые значения со статусом Запланировано или Реализовано 
		where $(cbmNotEmptyRecords(tb_code, gosb_code, product)) and ("year" <> 0) and (quarter <> 0) and 
			((status = 127) or (status = 128) or (status = 129) or (status = 130) or (status = 131) or (status = 134) or (status = 777));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	// Добавляет к таблице данные из таблицы оргкодов
	left join (cbm_fbs) load 
		org_code,
		org_tb_code as cbm_fbs.TBCode,
		org_gosb_code as cbm_fbs.GOSBCode,
		org_tb_name as cbm_fbs.TBName,
		org_gosb_name as cbm_fbs.GOSBName,
		If(IsNull(org_cluster), 'Без группы', org_cluster) as cbm_fbs.Cluster
 	resident org;
	// drop table org;

	//Добавляет в основную таблицу ID и количество продуктов из справочника
	left join(cbm_fbs) load
		product as cbm_fbs.Product,
		product_id as cbm_fbs.ProductID,
		product_count as cbm_fbs.ProductCount
	resident product_lookup;
	drop table product_lookup;

	//Сливает записи по оргкоду
	//Убирает из таблицы записи с продуктами не из справочника
	temp:
	noconcatenate load *,
		cbm_fbs.Penetration - cbm_fbs.PrevPenetration as cbm_fbs.PenetrationGrowth;
	noconcatenate load 
		org_code,
		cbm_fbs.TBCode,
		cbm_fbs.GOSBCode,
		cbm_fbs.TBName,
		cbm_fbs.GOSBName,
		cbm_fbs.Cluster,
		Sum(cbm_fbs.FactPastQuarters) as cbm_fbs.FactPastQuarters,
		Sum(cbm_fbs.PlanThisAndFutureQuarters) as cbm_fbs.PlanThisAndFutureQuarters,
		Sum(cbm_fbs.Plan4QThisYear) as cbm_fbs.Plan4QThisYear,
		Sum(cbm_fbs.PlanThisYear) as cbm_fbs.PlanThisYear,
		Sum(cbm_fbs.IncomeFact) as cbm_fbs.IncomeFact,
		Count(distinct If(cbm_fbs.Fact > 0, cbm_fbs.Product)) / Only(cbm_fbs.ProductCount) as cbm_fbs.Penetration,
		Count(distinct If(cbm_fbs.PrevFact > 0, cbm_fbs.Product)) / Only(cbm_fbs.ProductCount) as cbm_fbs.PrevPenetration
	resident cbm_fbs
	where not(IsNull(cbm_fbs.ProductID)) and (org_code <> 3838) and (org_code <> 529052)
	group by org_code, cbm_fbs.TBCode, cbm_fbs.GOSBCode, cbm_fbs.TBName, cbm_fbs.GOSBName, cbm_fbs.Cluster;
	drop table cbm_fbs;
	rename table temp to cbm_fbs;

	////////////////////////////////////////////////////////////////////////////////

	// Выделяет таблицу метрики 10000021
	cbm_fbs_10000021:
	noconcatenate load * resident cbm_fbs;

	//Добавляет данные ориентира
	left join(cbm_fbs_10000021) load
    org_code,
		Sum(If(Year('$(v_cbmToday)') = 2024, "2024q4", 0)) as cbm_fbs.Milestone
		// Sum(Pick(Match($(ggffQuarterNo('$(v_cbmToday)'))&Year('$(v_cbmToday)'), '32023', '42023', '12024') + 1,
		// 	0, "2 кв", "3 кв", "4 кв"
		// )) as cbm_fbs.Milestone
		// Sum(Pick(Match($(ggffQuarterNo('10.02.2024'))&Year('10.02.2024'), '32023', '42023', '12024') + 1,
		// 	0, "2 кв", "3 кв", "4 кв"
		// )) as cbm_fbs.Milestone
	from [$(fbs_mls_xl)]
	(ooxml, embedded labels, table is Sheet1)
	where (org_code <> 3838) and (org_code <> 529052)
	group by org_code;

	// Получает значение метрики 10000021
	temp:
	noconcatenate load *,
		10000021 as cbm_fbs.MetricID,
		'Достаточность PL продаж продуктов полки' as cbm_fbs.MetricName,
		1 as cbm_fbs.MetricDirection,
		0.9 as cbm_fbs.MetricPlanValue,
		Null() as cbm_fbs.ElementType, 
		Null() as cbm_fbs.ElementID,
		'EXT_FILE' as cbm_fbs.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_fbs.ReportDate,
		'STUFF' as cbm_fbs.StructLevel,
		'1) Факт продаж продуктов полки ('&$(cbmPastQuarterOnlyThisYearDates)&') - '&cbm_fbs.FactPastQuarters&' шт. '&chr(13)&
		'2) PL продаж продуктов полки ('&$(cbmThisAndFutureQuarterThisYearDates)&') - '&cbm_fbs.PlanThisAndFutureQuarters&' шт. '&chr(13)&
		'3) Ориентир продаж - '&cbm_fbs.Milestone&' шт.'
		as cbm_fbs.DevElementName,
		If((cbm_fbs.Milestone > 0), 
			(cbm_fbs.FactPastQuarters + cbm_fbs.PlanThisAndFutureQuarters) / cbm_fbs.Milestone, 
			// Если нет ориентира, то выше границы плана
			'1'
		) as cbm_fbs.MetricValue,
		'10000021_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_fbs.LoadID
	resident cbm_fbs_10000021;
	drop table cbm_fbs_10000021;
	rename table temp to cbm_fbs_10000021;

	// Расчитывает значение перцентиля 0,75
	left join(cbm_fbs_10000021) load
		Fractile(cbm_fbs.MetricValue, 0.75) as cbm_fbs.Percentile75
	resident cbm_fbs_10000021
	where (cbm_fbs.MetricValue >= cbm_fbs.MetricPlanValue);

	// Добавляет поля ResultEvaluation и DeviationMarker
	temp:
	noconcatenate load *,
		'(Факт - <b>'&Num(cbm_fbs.MetricValue, '$(ggffPCT)')&
			'</b>. Цель - не меньше <b>'&Num(cbm_fbs.MetricPlanValue, '$(ggffPCT)')&
			'</b>. Ориентир - больше <b>'&Num(cbm_fbs.Percentile75, '$(ggffPCT)')&'</b>)' 
		as cbm_fbs.ResultEvaluation,
		If((cbm_fbs.MetricValue < cbm_fbs.MetricPlanValue), 
			1, 
			If((cbm_fbs.MetricValue > cbm_fbs.Percentile75),
				13,
				0
			)
		) as cbm_fbs.DeviationMarker
	resident cbm_fbs_10000021;
	drop table cbm_fbs_10000021;
	rename table temp to cbm_fbs_10000021;

	// Сливает данные метрики 10000021 с основной таблицей
	call cbmMergeMetric(10000021);

	////////////////////////////////////////////////////////////////////////////////

	// Выделяет таблицу метрики 10000022
	cbm_fbs_10000022:
	noconcatenate load * resident cbm_fbs;

	// Получает значение метрики 10000022
	temp:
	noconcatenate load *,
		'(Факт - <b>'&Num(cbm_fbs.MetricValue, '$(ggffPCD)')&
			'</b>. Цель - не больше <b>'&Num(cbm_fbs.MetricPlanValue, '$(ggffPCD)')&'</b>)' 
		as cbm_fbs.ResultEvaluation,
		If((cbm_fbs.MetricValue > cbm_fbs.MetricPlanValue), 1, 0) as cbm_fbs.DeviationMarker;
	noconcatenate load *,
		10000022 as cbm_fbs.MetricID,
		'Неравномерность плана продаж продуктов полки' as cbm_fbs.MetricName,
		2 as cbm_fbs.MetricDirection,
		0.6 as cbm_fbs.MetricPlanValue,
		Null() as cbm_fbs.ElementType, 
		Null() as cbm_fbs.ElementID,
		'EXT_FILE' as cbm_fbs.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_fbs.ReportDate,
		'STUFF' as cbm_fbs.StructLevel,
		'1) PL продаж продуктов полки на 4 кв. - '&cbm_fbs.Plan4QThisYear&' шт. '&chr(13)&
		'2) Годовой PL продаж продуктов полки - '&cbm_fbs.PlanThisYear&' шт.'
		as cbm_fbs.DevElementName,
		If((cbm_fbs.PlanThisYear > 0), 
			cbm_fbs.Plan4QThisYear / cbm_fbs.PlanThisYear,
			// Если нет годового плана
			0
		) as cbm_fbs.MetricValue,
		'10000022_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_fbs.LoadID
	resident cbm_fbs_10000022;
	drop table cbm_fbs_10000022;
	rename table temp to cbm_fbs_10000022;

	// Сливает данные метрики 10000022 с основной таблицей
	call cbmMergeMetric(10000022);

	////////////////////////////////////////////////////////////////////////////////

	// Выделяет таблицу метрики 10000023
	cbm_fbs_10000023:
	noconcatenate load * resident cbm_fbs;

	// Расчитывает значение перцентилей 0,75 и 0,25
	left join(cbm_fbs_10000023) load 
		cbm_fbs.Cluster,
		Fractile(cbm_fbs.IncomeFact, 0.75) as cbm_fbs.Percentile75,
		Fractile(cbm_fbs.IncomeFact, 0.25) as cbm_fbs.Percentile25
	resident cbm_fbs_10000023
	group by cbm_fbs.Cluster;

	// Получает значение метрики 10000023
	temp:
	noconcatenate load *,
		10000023 as cbm_fbs.MetricID,
		'Низкая доходность продаж продуктов полки управляющего' as cbm_fbs.MetricName,
		1 as cbm_fbs.MetricDirection,
		0 as cbm_fbs.MetricPlanValue,
		Null() as cbm_fbs.ElementType, 
		Null() as cbm_fbs.ElementID,
		'EXT_FILE' as cbm_fbs.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_fbs.ReportDate,
		'STUFF' as cbm_fbs.StructLevel,
		'1) Граница боттом 25% - '&cbm_fbs.Percentile25&' руб. '&chr(13)&
		'2) Граница топ 25% - '&cbm_fbs.Percentile75&' руб.'
		as cbm_fbs.DevElementName,
		cbm_fbs.IncomeFact as cbm_fbs.MetricValue,
		'10000023_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_fbs.LoadID,
		'(Факт - <b>'&Num(cbm_fbs.IncomeFact / 1000000, '$(ggffNUH)')&
			' млн руб.</b> Цель - больше <b>'&Num(cbm_fbs.Percentile25 / 1000000, '$(ggffNUH)')&
			' млн руб.</b> Ориентир - больше <b>'&Num(cbm_fbs.Percentile75 / 1000000, '$(ggffNUH)')&' млн руб.</b>)' 
		as cbm_fbs.ResultEvaluation,
		If((cbm_fbs.IncomeFact > cbm_fbs.Percentile75), 
			13, 
			If((cbm_fbs.IncomeFact <= cbm_fbs.Percentile25) and ((cbm_fbs.Percentile25 <> 0) or (cbm_fbs.Percentile75 <> 0)),
				1,
				0
			)
		) as cbm_fbs.DeviationMarker
	resident cbm_fbs_10000023;
	drop table cbm_fbs_10000023;
	rename table temp to cbm_fbs_10000023;

	// Сливает данные метрики 10000023 с основной таблицей
	call cbmMergeMetric(10000023);
	
	////////////////////////////////////////////////////////////////////////////////

	// Выделяет таблицу метрики 10000024
	cbm_fbs_10000024:
	noconcatenate load * resident cbm_fbs;

	// Расчитывает значение перцентилей 0,75 и 0,25
	left join(cbm_fbs_10000024) load 
		cbm_fbs.Cluster,
		Fractile(cbm_fbs.Penetration, 0.75) as cbm_fbs.Percentile75,
		Fractile(cbm_fbs.Penetration, 0.25) as cbm_fbs.Percentile25
	resident cbm_fbs_10000024
	group by cbm_fbs.Cluster;

	// Получает значение метрики 10000024
	temp:
	noconcatenate load *,
		10000024 as cbm_fbs.MetricID,
		'Низкая доля продаж продуктов полки управляющего' as cbm_fbs.MetricName,
		1 as cbm_fbs.MetricDirection,
		0 as cbm_fbs.MetricPlanValue,
		Null() as cbm_fbs.ElementType, 
		Null() as cbm_fbs.ElementID,
		'EXT_FILE' as cbm_fbs.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_fbs.ReportDate,
		'STUFF' as cbm_fbs.StructLevel,
		'1) Граница боттом 25% - '&Num(cbm_fbs.Percentile25, '#.0%', '.', '')&chr(13)&
		'2) Граница топ 25% - '&Num(cbm_fbs.Percentile75, '#.0%', '.', '') 
		as cbm_fbs.DevElementName,
		cbm_fbs.Penetration as cbm_fbs.MetricValue,
		'10000024_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_fbs.LoadID,
		'(Факт - <b>'&Num(cbm_fbs.Penetration, '$(ggffPCD)')&
			'</b>. Цель - больше <b>'&Num(cbm_fbs.Percentile25, '$(ggffPCD)')&
			'</b>. Ориентир - больше <b>'&Num(cbm_fbs.Percentile75, '$(ggffPCD)')&'</b>)' 
		as cbm_fbs.ResultEvaluation,
		If((cbm_fbs.Penetration > cbm_fbs.Percentile75), 
			13, 
			If((cbm_fbs.Penetration <= cbm_fbs.Percentile25) and ((cbm_fbs.Percentile25 <> 0) or (cbm_fbs.Percentile75 <> 0)),
				1,
				0
			)
		) as cbm_fbs.DeviationMarker
	resident cbm_fbs_10000024;
	drop table cbm_fbs_10000024;
	rename table temp to cbm_fbs_10000024;

	// Сливает данные метрики 10000024 с основной таблицей
	call cbmMergeMetric(10000024);

	////////////////////////////////////////////////////////////////////////////////

	// Выделяет таблицу метрики 10000025
	cbm_fbs_10000025:
	noconcatenate load * resident cbm_fbs;

	// Расчитывает значение перцентиля 0,5
	left join(cbm_fbs_10000025) load 
		cbm_fbs.Cluster,
		Fractile(cbm_fbs.Penetration, 0.5) as cbm_fbs.PenetrationPercentile50,
		Fractile(cbm_fbs.PenetrationGrowth, 0.5) as cbm_fbs.PenetrationGrowthPercentile50
	resident cbm_fbs_10000025
	group by cbm_fbs.Cluster;

	// Получает значение метрики 10000025
	temp:
	noconcatenate load *,
		10000025 as cbm_fbs.MetricID,
		'Низкий прирост доли продаж продуктов полки управляющего' as cbm_fbs.MetricName,
		1 as cbm_fbs.MetricDirection,
		0 as cbm_fbs.MetricPlanValue,
		Null() as cbm_fbs.ElementType, 
		Null() as cbm_fbs.ElementID,
		'EXT_FILE' as cbm_fbs.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_fbs.ReportDate,
		'STUFF' as cbm_fbs.StructLevel,
		'1) Фактическая доля продаж продуктов полки - '&Num(cbm_fbs.Penetration, '#.0%', '.', '')&chr(13)&
		'2) Медиана фактической доли продаж продуктов полки по кластеру - '&Num(cbm_fbs.PenetrationPercentile50, '#.0%', '.', '')&chr(13)&
		'3) Темп прироста доли продаж продуктов полки - '&Num(cbm_fbs.PenetrationGrowth * 100, '#.0пп', '.', '')&chr(13)&
		'4) Медиана темпа прироста фактической доли продаж продуктов полки по кластеру - '&Num(cbm_fbs.PenetrationGrowthPercentile50 * 100, '#.0пп', '.', '') 
		as cbm_fbs.DevElementName,
		cbm_fbs.PenetrationGrowth as cbm_fbs.MetricValue,
		'10000025_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_fbs.LoadID,
		'(Доля - <b>'&Num(cbm_fbs.Penetration, '$(ggffPCD)')&
			'</b>. Прирост доли за кв. <b>'&Num(cbm_fbs.PenetrationGrowth * 100, '$(ggffPPT)')&
			'</b>. Цель - доля больше <b>'&Num(cbm_fbs.PenetrationPercentile50, '$(ggffPCD)')&
			'</b> или прирост доли за кв. больше <b>'&Num(cbm_fbs.PenetrationGrowthPercentile50 * 100, '$(ggffPPT)')&
			'</b>. Ориентир - доля больше <b>'&Num(cbm_fbs.PenetrationPercentile50, '$(ggffPCD)')&
			'</b> и прирост доли за кв. больше <b>'&Num(cbm_fbs.PenetrationGrowthPercentile50 * 100, '$(ggffPPT)')&'</b>)'
		as cbm_fbs.ResultEvaluation,
		If((cbm_fbs.Penetration >= cbm_fbs.PenetrationPercentile50) and (cbm_fbs.PenetrationGrowth > cbm_fbs.PenetrationGrowthPercentile50), 
			13, 
			If((cbm_fbs.Penetration < cbm_fbs.PenetrationPercentile50) and (cbm_fbs.PenetrationGrowth <= cbm_fbs.PenetrationGrowthPercentile50) and 
				((cbm_fbs.PenetrationPercentile50 <> 0) or (cbm_fbs.PenetrationGrowthPercentile50 <> 0)),
				1,
				0
			)
		) as cbm_fbs.DeviationMarker
	resident cbm_fbs_10000025;
	drop table cbm_fbs_10000025;
	rename table temp to cbm_fbs_10000025;

	// Сливает данные метрики 10000025 с основной таблицей
	call cbmMergeMetric(10000025);
	drop table cbm_fbs;

	////////////////////////////////////////////////////////////////////////////////
	// Данные о посещаемости
	// Возвращает второе значение кода ГОСБ, если первое не определено или неверно
	set cbmGOSBCoalesce = If(IsNull($1) or ($1 = '') or ($1 = '-') or ($1 = 0) or ($1 = 8558) or ($1 = 1806), $2, $1);

	//Получает таблицу активных пользователей ПРБР: упров и регдиров
	if '$(cbmConnection)' = '1' then
		//QVD
		cbm_trf:
		noconcatenate load *,
			$(ggffCreateOrgCode(tb_code_1, gosb_code_1)) as org_code;
		noconcatenate load
			sber_id as cbm_trf.SberID,
			role_id as cbm_trf.RoleID,
			sudir_tb as tb_code_1,
			$(cbmGOSBCoalesce(sudir_gosb, gosb_code)) as gosb_code_1,
			Coalesce(ft_id, 0) as cbm_trf.FtID_1
		from [$(trf_users_qvd)] (qvd)
		where (enabled = 1) and ((role_id = 14) or (role_id = 35)) and (sudir_gosb <> 9052);

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		//Excel
		cbm_trf:
		noconcatenate load *,
			$(ggffCreateOrgCode(tb_code_1, gosb_code_1)) as org_code;
		noconcatenate load
			sber_id as cbm_trf.SberID,
			role_id as cbm_trf.RoleID,
			sudir_tb as tb_code_1,
			$(cbmGOSBCoalesce(sudir_gosb, gosb_code)) as gosb_code_1,
			Coalesce(ft_id, 0) as cbm_trf.FtID_1
		from [$(trf_users_xl)] (ooxml, embedded labels, table is Sheet1)
		where (enabled = 1) and ((role_id = 14) or (role_id = 35)) and (sudir_gosb <> 9052);

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;
	drop fields tb_code_1, gosb_code_1;

	// Получает данные о посещаемости упров и регдиров
	if '$(cbmConnection)' = '1' then
		//QVD
		cbm_trf_data:
		noconcatenate load
			sber_id as cbm_trf_data.SberID,
			duration as cbm_trf_data.Duration
		from [$(trf_qvd)] (qvd)
		where ((title = 'Управляющий ГОСБ') or (title = 'Региональный директор')) and 
			(Date(Floor(dates)) >= Date(Floor($(cbmGetPrevMStart)))) and 
			(Date(Floor(dates)) <= Date(Floor($(cbmGetPrevMEnd))));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		//Excel
		cbm_trf_data:
		noconcatenate load
			sber_id as cbm_trf_data.SberID,
			duration as cbm_trf_data.Duration
		from [$(trf_xl)] (ooxml, embedded labels, table is Sheet1)
		where ((title = 'Управляющий ГОСБ') or (title = 'Региональный директор')) and 
			(Date(Floor(dates)) >= Date(Floor($(cbmGetPrevMStart)))) and 
			(Date(Floor(dates)) <= Date(Floor($(cbmGetPrevMEnd))));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	// Добавляет данные о посещаемости в основную таблицу 
	left join(cbm_trf) load
		cbm_trf_data.SberID as cbm_trf.SberID,
		cbm_trf_data.Duration as cbm_trf.Duration
	resident cbm_trf_data;
	drop table cbm_trf_data;

	// Добавляет к таблице данные из таблицы оргкодов
	left join(cbm_trf) load
		org_code,
		org_tb_code as cbm_trf.TBCode,
		org_gosb_code as cbm_trf.GOSBCode,
		org_tb_name as cbm_trf.TBName,
		org_gosb_name as cbm_trf.GOSBName
	resident org 
	where Len(org_code) > 2;

	// Сливает данные по оргкоду, роли и сбер-айди
	temp:
	noconcatenate load
		org_code,
		cbm_trf.FtID_1,
		Only(cbm_trf.RoleID) as cbm_trf.RoleID,
		Only(cbm_trf.SberID) as cbm_trf.SberID,
		Only(cbm_trf.TBCode) as cbm_trf.TBCode,
		Only(cbm_trf.GOSBCode) as cbm_trf.GOSBCode,
		Only(cbm_trf.TBName) as cbm_trf.TBName,
		Only(cbm_trf.GOSBName) as cbm_trf.GOSBName,
		Sum(cbm_trf.Duration) as cbm_trf.Duration
	resident cbm_trf
	group by org_code, cbm_trf.FtID_1;
	drop table cbm_trf;
	rename table temp to cbm_trf;

	// Расчитывает значение перцентиля 0,75
	left join(cbm_trf) load 
		Fractile(cbm_trf.Duration, 0.75) as cbm_trf.Percentile75
	resident cbm_trf;

	// Получает значение метрики
	temp:
	noconcatenate load *,
		If(cbm_trf.RoleID = 14, 10000035, 20000018) as cbm_trf.MetricID,
		// Передает айди ФТ только для Регдиректоров
		If(cbm_trf.RoleID = 35, cbm_trf.FtID_1) as cbm_trf.FtID,
		'Посещаемость платформы ПРБР' as cbm_trf.MetricName,
		1 as cbm_trf.MetricDirection,
		0 as cbm_trf.MetricPlanValue,
		Null() as cbm_trf.ElementType, 
		Null() as cbm_trf.ElementID,
		'EXT_FILE' as cbm_trf.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_trf.ReportDate,
		'STUFF' as cbm_trf.StructLevel,
		'<a href="https://infopanel.sigma.sbrf.ru/web/infopanel/dash/prbr-admittance/prbr-admittance-table">Внешняя ссылка. </a>'&
			'<a href="https://infopanel.omega.sbrf.ru/web/infopanel/dash/prbr-admittance/prbr-admittance-table">Внутренняя ссылка.</a>' 
		as cbm_trf.DevElementName,
		cbm_trf.Duration as cbm_trf.MetricValue,
		If(cbm_trf.RoleID = 14, 		
			'10000035_'&Date($(cbmGetPrevMStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevMEnd), 'YYYYMMDD'),
			'20000018_'&Date($(cbmGetPrevMStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevMEnd), 'YYYYMMDD') 
		) as cbm_trf.LoadID,
		If((cbm_trf.Duration > cbm_trf.Percentile75), 
			13, 
			If((cbm_trf.Duration <= 0),
				1,
				0
			)
		) as cbm_trf.DeviationMarker,
		'(Факт - <b>'&Interval(cbm_trf.Duration/(3600*24),'h:mm:ss')&'. Цель - больше 0'&
			'</b>. Ориентир - больше <b>'&Interval(cbm_trf.Percentile75/(3600*24),'h:mm:ss')&'</b>)' 
		as cbm_trf.ResultEvaluation
	resident cbm_trf;
	drop table cbm_trf;
	rename table temp to cbm_trf;

	// Сливает данные метрики с основной таблицей
	concatenate(cbm_data) load
		org_code,
		cbm_trf.TBCode as cbm.TBCode,
		cbm_trf.GOSBCode as cbm.GOSBCode,
		cbm_trf.TBName as cbm.TBName,
		cbm_trf.GOSBName as cbm.GOSBName,
		cbm_trf.MetricID as cbm.MetricID,
		cbm_trf.MetricName as cbm.MetricName,
		cbm_trf.MetricDirection as cbm.MetricDirection,
		cbm_trf.MetricPlanValue as cbm.MetricPlanValue,
		cbm_trf.ElementType as cbm.ElementType, 
		cbm_trf.ElementID as cbm.ElementID,
		cbm_trf.Segment as cbm.Segment,
		cbm_trf.ReportDate as cbm.ReportDate,
		cbm_trf.StructLevel as cbm.StructLevel,
		cbm_trf.DevElementName as cbm.DevElementName,
		cbm_trf.MetricValue as cbm.MetricValue,
		cbm_trf.ResultEvaluation as cbm.ResultEvaluation,
		cbm_trf.DeviationMarker as cbm.DeviationMarker,
		cbm_trf.LoadID as cbm.LoadID,
		cbm_trf.FtID as cbm.FtID
	resident cbm_trf;
	drop table cbm_trf;

	////////////////////////////////////////////////////////////////////////////////
	// Данные AI-трансформации

	// Получает таблицу AI-трансформации
	if '$(cbmConnection)' = '1' then
		// QVD
		cbm_ai:
		noconcatenate load
			// iicom23.DATE as cbm_ai.Date,
			// iicom23.PRODUCT,
			Sum(iicom23.COMMIS) as cbm_ai.Income,
			// iicom23.DZO_NAME,
			org_code
			// If(IsNull(org_code) or (org_code = ''), 99, org_code) as org_code
		from [$(cbm_ai_qvd)] (qvd)
		// Без ЦА и Москвы
		where not(IsNull(org_code)) and (org_code <> '') and (org_code <> 3838) and (Year(Date(iicom23.DATE)) = Year(Today()))
		group by org_code;

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		// Excel
		cbm_ai:
		noconcatenate load
			// If((org_code = '') or (org_code = '-'), 99, org_code) as org_code,
			org_code,
			// iicom23.DATE as cbm_ai.Date,
			// iicom23.DZO_NAME,
			// iicom23.PRODUCT,
			Sum(iicom23.COMMIS) as cbm_ai.Income
		from [$(cbm_ai_xl)] (ooxml, embedded labels, table is Sheet1)
		// Без ЦА и Москвы
		where (org_code <> '') and (org_code <> '-') and (org_code <> 3838) and (Year(Date(iicom23.DATE)) = Year(Today()))
		group by org_code;

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	// Добавляет в таблицу матрицу оргкодов всех ГОСБ
	concatenate (cbm_ai) load org_code resident org where not(IsNull(org_gosb_code));
	// Сливает таблицу по org_code, оставляя нули у отсутствующих в данных ГОСБ
	temp:
	noconcatenate load 
		org_code,
		Sum(cbm_ai.Income) as cbm_ai.Income
	resident cbm_ai
	group by org_code;
	drop table cbm_ai;
	rename table temp to cbm_ai;

	// Добавляет к таблице данные из таблицы оргкодов
	left join (cbm_ai) load 
		org_code,
		org_tb_code as cbm_ai.TBCode,
		org_gosb_code as cbm_ai.GOSBCode,
		org_tb_name as cbm_ai.TBName,
		org_gosb_name as cbm_ai.GOSBName,
		If(IsNull(org_cluster), 'Без группы', org_cluster) as cbm_ai.Cluster
 	resident org;

	// Расчитывает значение перцентилей 0,75 и 0,25
	left join(cbm_ai) load 
		cbm_ai.Cluster,
		Fractile(cbm_ai.Income, 0.75) as cbm_ai.Percentile75,
		Fractile(cbm_ai.Income, 0.25) as cbm_ai.Percentile25
	resident cbm_ai
	group by cbm_ai.Cluster;

	// Получает значение метрики 10000050
	temp:
	noconcatenate load *,
		10000050 as cbm_ai.MetricID,
		'Низкий доход от продаж продуктов с AI-трансформацией' as cbm_ai.MetricName,
		1 as cbm_ai.MetricDirection,
		0 as cbm_ai.MetricPlanValue,
		Null() as cbm_ai.ElementType, 
		Null() as cbm_ai.ElementID,
		'EXT_FILE' as cbm_ai.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_ai.ReportDate,
		'STUFF' as cbm_ai.StructLevel,
		'1) Граница боттом 25% - '&Round(cbm_ai.Percentile25, 0.01)&' руб. '&Chr(13)&
		'2) Граница топ 25% - '&Round(cbm_ai.Percentile75, 0.01)&' руб. '&Chr(13)&
		'<a href="https://infopanel.sigma.sbrf.ru/web/infopanel/dash/ai/income">Ссылка внешняя</a> '&Chr(13)&
		'<a href="https://infopanel.omega.sbrf.ru/web/infopanel/dash/ai/income">Ссылка внутренняя</a>'
		as cbm_ai.DevElementName,
		cbm_ai.Income as cbm_ai.MetricValue,
		'10000050_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_ai.LoadID,
		'(Факт - <b>'&Num(cbm_ai.Income / 1000, '$(ggffNUH)')&
			' тыс. руб.</b>. Цель - больше <b>'&Num(cbm_ai.Percentile25 / 1000, '$(ggffNUH)')&
			' тыс. руб.</b>. Ориентир - больше <b>'&Num(cbm_ai.Percentile75 / 1000, '$(ggffNUH)')&' тыс. руб.</b>)' 
		as cbm_ai.ResultEvaluation,
		If((cbm_ai.Income > cbm_ai.Percentile75), 
			13, 
			If((cbm_ai.Income <= cbm_ai.Percentile25) and ((cbm_ai.Percentile25 <> 0) or (cbm_ai.Percentile75 <> 0)),
				1,
				0
			)
		) as cbm_ai.DeviationMarker
	resident cbm_ai
	// Убирает из данных строки Абаканского, Адыгейского и Кызылского ГОСБ
	where (org_code <> 448602) and (org_code <> 528620) and (org_code <> 448591);
	drop table cbm_ai;
	rename table temp to cbm_ai;

	// Сливает данные метрики с основной таблицей
	concatenate(cbm_data) load
		org_code,
		cbm_ai.TBCode as cbm.TBCode,
		cbm_ai.GOSBCode as cbm.GOSBCode,
		cbm_ai.TBName as cbm.TBName,
		cbm_ai.GOSBName as cbm.GOSBName,
		cbm_ai.MetricID as cbm.MetricID,
		cbm_ai.MetricName as cbm.MetricName,
		cbm_ai.MetricDirection as cbm.MetricDirection,
		cbm_ai.MetricPlanValue as cbm.MetricPlanValue,
		cbm_ai.ElementType as cbm.ElementType, 
		cbm_ai.ElementID as cbm.ElementID,
		cbm_ai.Segment as cbm.Segment,
		cbm_ai.ReportDate as cbm.ReportDate,
		cbm_ai.StructLevel as cbm.StructLevel,
		cbm_ai.DevElementName as cbm.DevElementName,
		cbm_ai.MetricValue as cbm.MetricValue,
		cbm_ai.ResultEvaluation as cbm.ResultEvaluation,
		cbm_ai.DeviationMarker as cbm.DeviationMarker,
		cbm_ai.LoadID as cbm.LoadID
	resident cbm_ai;
	drop table cbm_ai;

	////////////////////////////////////////////////////////////////////////////////
	// Данные долей

	//Получает данные долей
	if '$(cbmConnection)' = '1' then
		//QVD
		cbm_grm:
		noconcatenate load
			org_code,
			Num#(kpi_id) as cbm_grm.IndexID,
			Date(Floor(MonthEnd(kpi_report_date))) as cbm_grm.Date,
			kpi_amt_sber as cbm_grm.SBRValue,
			kpi_amt_market as cbm_grm.MKTValue
		from [$(grm_data_qvd)] (QVD)
		where (org_code <> 529052) and (org_code <> 38) and 
			((kpi_id = '2141076') or (kpi_id = '1001115') or (kpi_id = '2081079') or (kpi_id = '2091156') or (kpi_id = '10003300') or
			(kpi_id = '10901388') or (kpi_id = '10902922') or (kpi_id = '10901073') or (kpi_id = '10902917') or (kpi_id = '10902915'));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		cbm_grm:
		noconcatenate load
			org_code,
			Num#(kpi_id) as cbm_grm.IndexID,
			Date(Floor(MonthEnd(kpi_report_date))) as cbm_grm.Date,
			kpi_amt_sber as cbm_grm.SBRValue,
			kpi_amt_market as cbm_grm.MKTValue
		from [$(grm_data_xl)]
		(ooxml, embedded labels, table is Sheet1)
		where (org_code <> 529052) and (org_code <> 38) and 
			((kpi_id = '2141076') or (kpi_id = '1001115') or (kpi_id = '2081079') or (kpi_id = '2091156') or (kpi_id = '10003300') or
			(kpi_id = '10901388') or (kpi_id = '10902922') or (kpi_id = '10901073') or (kpi_id = '10902917') or (kpi_id = '10902915'));

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	//Сливает записи по оргкоду, показателю и дате
	temp:
	noconcatenate load 
		org_code, 
		cbm_grm.IndexID, 
		cbm_grm.Date, 
		Sum(cbm_grm.SBRValue) as cbm_grm.SBRValue, 
		Sum(cbm_grm.MKTValue) as cbm_grm.MKTValue
	resident cbm_grm
	group by org_code, cbm_grm.IndexID, cbm_grm.Date;
	drop table cbm_grm;
	rename table temp to cbm_grm;

	//Таблица подстановки имени и типа сравнения по показателям
	compare_type_lookup:
	noconcatenate load * inline [
		id, name, delta_type
		2141076, ФОТ, АППГ
		1001115, Пенсии, АППГ
		2081079, ЖКХ, АППГ
		2091156, Эквайринг, АППГ
		10003300, NoCash, АППГ
		10901388, eCom, АППГ
		10902922, КР ЮЛ (ЦБ), СНГ
		10901073, ПС ЮЛ (ЦБ), СНГ
		10902917, ЖК ФЛ, СНГ
		10902915, ПС ФЛ, СНГ
	];

	//Добавляет данные по показателям из таблицы подстановки
	left join (cbm_grm) load
		id as cbm_grm.IndexID,
		name as cbm_grm.Index,
		delta_type as cbm_grm.CompareType
	resident compare_type_lookup;
	drop table compare_type_lookup;

	//Находит последнюю дату по показателю и ГОСБ
	left join (cbm_grm) load
		cbm_grm.IndexID,
		org_code,
		Date(Floor(Max(cbm_grm.Date))) as cbm_grm.LastDate
	resident cbm_grm
	group by cbm_grm.IndexID, org_code;

	//Находит предыдущую дату для сравнения с последней
	left join (cbm_grm) load
		org_code,
		cbm_grm.IndexID,
		cbm_grm.Date,
		//Предыдущая дата
		If(cbm_grm.CompareType = 'АППГ',
			//Год назад
			Date(Floor(AddYears(cbm_grm.LastDate, -1))),
			//Конец прошлого года
			Date(Floor(YearEnd(AddYears(cbm_grm.LastDate, -1))))
		) as cbm_grm.PrevDate
	resident cbm_grm;
	
	//Находит данные за предыдущую дату
	left join (cbm_grm) load
		org_code,
		cbm_grm.IndexID,
		cbm_grm.Date as cbm_grm.PrevDate,
		cbm_grm.SBRValue as cbm_grm.PrevSBRValue,
		cbm_grm.MKTValue as cbm_grm.PrevMKTValue
	resident cbm_grm;

	temp:
	noconcatenate load *,
		//Рост доли Сбера
		cbm_grm.SBRShare - cbm_grm.PrevSBRShare as cbm_grm.SBRShareGrowth;
	noconcatenate load *,
		//Текущая доля Сбера
		If(IsNull(cbm_grm.SBRValue) or IsNull(cbm_grm.MKTValue) or (cbm_grm.MKTValue = 0), 
			0, 
			cbm_grm.SBRValue / cbm_grm.MKTValue
		) as cbm_grm.SBRShare,
		//Предыдущая доля Сбера
		If(IsNull(cbm_grm.PrevSBRValue) or IsNull(cbm_grm.PrevMKTValue) or (cbm_grm.PrevMKTValue = 0), 
			0, 
			cbm_grm.PrevSBRValue / cbm_grm.PrevMKTValue
		) as cbm_grm.PrevSBRShare
	resident cbm_grm
	//Оставляет только последнюю дату
	where (cbm_grm.Date = cbm_grm.LastDate);
	drop table cbm_grm;
	rename table temp to cbm_grm;

	// Считает чмсло показателей с отрицательным ростом доли
	// Заполняет список снижающихся долей
	left join(cbm_grm) load
		org_code,
		Count(If(cbm_grm.SBRShareGrowth < 0, cbm_grm.IndexID)) as cbm_grm.NegativeGrowthCount,
		Concat(
			If(cbm_grm.SBRShareGrowth < 0,
				cbm_grm.Index&'. Значение - '&Num(cbm_grm.SBRShare, '$(ggffPCD)')&
					'. Изменение '&Num(cbm_grm.SBRShareGrowth * 100, '$(ggffPPT)')&' '&cbm_grm.CompareType&
					'. Дата - '&cbm_grm.Date
			), 
		Chr(13), cbm_grm.SBRShareGrowth) as cbm_grm.FallingSharesList
	resident cbm_grm
	group by org_code;

	// Сливает таблицу по оргкоду, оставляя только нужные аггрегаты
	temp:
	noconcatenate load 
		org_code,
		Only(cbm_grm.NegativeGrowthCount) as cbm_grm.NegativeGrowthCount,
		Only(cbm_grm.FallingSharesList) as cbm_grm.FallingSharesList
	resident cbm_grm
	group by org_code;
	drop table cbm_grm;
	rename table temp to cbm_grm;

	// Добавляет к таблице данные из таблицы оргкодов
	left join (cbm_grm) load 
		org_code,
		org_tb_code as cbm_grm.TBCode,
		org_gosb_code as cbm_grm.GOSBCode,
		org_tb_name as cbm_grm.TBName,
		org_gosb_name as cbm_grm.GOSBName
 	resident org;

	// Расчитывает значение перцентилей 0,75 и 0,25
	left join(cbm_grm) load 
		Fractile(cbm_grm.NegativeGrowthCount, 0.75) as cbm_grm.Percentile75,
		Fractile(cbm_grm.NegativeGrowthCount, 0.25) as cbm_grm.Percentile25
	resident cbm_grm;

	// Получает значение метрики 10000001
	temp:
	noconcatenate load *,
		10000001 as cbm_grm.MetricID,
		'Большое количество снижающихся долей рынков ГОСБ' as cbm_grm.MetricName,
		2 as cbm_grm.MetricDirection,
		0 as cbm_grm.MetricPlanValue,
		Null() as cbm_grm.ElementType, 
		Null() as cbm_grm.ElementID,
		'EXT_FILE' as cbm_grm.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_grm.ReportDate,
		'STUFF' as cbm_grm.StructLevel,
		'1) Граница боттом 25% - '&cbm_grm.Percentile75&' '&chr(13)&
			'2) Граница топ 25% - '&cbm_grm.Percentile25&' '&chr(13)&
			cbm_grm.FallingSharesList 
		as cbm_grm.DevElementName,
		cbm_grm.NegativeGrowthCount as cbm_grm.MetricValue,
		'10000001_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_grm.LoadID,
		'(Факт - <b>'&cbm_grm.NegativeGrowthCount&
			'</b>. Цель - меньше <b>'&cbm_grm.Percentile25&
			'</b>. Ориентир - меньше <b>'&cbm_grm.Percentile75&'</b>)' 
		as cbm_grm.ResultEvaluation,
		If((cbm_grm.NegativeGrowthCount > cbm_grm.Percentile75) and ((cbm_grm.Percentile25 <> 0) or (cbm_grm.Percentile75 <> 0)), 
			1, 
			If((cbm_grm.NegativeGrowthCount <= cbm_grm.Percentile25),
				13,
				0
			)
		) as cbm_grm.DeviationMarker
	resident cbm_grm;
	drop table cbm_grm;
	rename table temp to cbm_grm;

	// Сливает данные метрики с основной таблицей
	concatenate(cbm_data) load
		org_code,
		cbm_grm.TBCode as cbm.TBCode,
		cbm_grm.GOSBCode as cbm.GOSBCode,
		cbm_grm.TBName as cbm.TBName,
		cbm_grm.GOSBName as cbm.GOSBName,
		cbm_grm.MetricID as cbm.MetricID,
		cbm_grm.MetricName as cbm.MetricName,
		cbm_grm.MetricDirection as cbm.MetricDirection,
		cbm_grm.MetricPlanValue as cbm.MetricPlanValue,
		cbm_grm.ElementType as cbm.ElementType, 
		cbm_grm.ElementID as cbm.ElementID,
		cbm_grm.Segment as cbm.Segment,
		cbm_grm.ReportDate as cbm.ReportDate,
		cbm_grm.StructLevel as cbm.StructLevel,
		cbm_grm.DevElementName as cbm.DevElementName,
		cbm_grm.MetricValue as cbm.MetricValue,
		cbm_grm.ResultEvaluation as cbm.ResultEvaluation,
		cbm_grm.DeviationMarker as cbm.DeviationMarker,
		cbm_grm.LoadID as cbm.LoadID
	resident cbm_grm;
	drop table cbm_grm;

	////////////////////////////////////////////////////////////////////////////////
	// Данные бизнес-плана

	//Получает данные бизнес-плана
	if '$(cbmConnection)' = '1' then
		//QVD
		cbm_bp:
		noconcatenate load
			alert_text as cbm_bp.Alert,
			// "color",
			// gosb,
			// kluster,
			// max_rank,
			// metric,
			// metric_value,
			org_code,
			// otchetnaya_data,
			// rank,
			// rank_color,
			Num#(rank_value) as cbm_bp.Deviations,
			Date(report_date) as cbm_bp.Date
		from [$(cbm_bp_qvd)] (QVD)
		where (metric = 'КП БП') and (Len(org_code) > 2) and (org_code <> 529052) and (org_code <> 161790);

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		cbm_bp:
		noconcatenate load
			alert_text as cbm_bp.Alert,
			// "color",
			// gosb,
			// kluster,
			// max_rank,
			// metric,
			// metric_value,
			org_code,
			// otchetnaya_data,
			// rank,
			// rank_color,
			Num#(rank_value) as cbm_bp.Deviations,
			Date(report_date) as cbm_bp.Date
		from [$(cbm_bp_xl)] (ooxml, embedded labels, table is Sheet1)
		where (metric = 'КП БП') and (Len(org_code) > 2) and (org_code <> 529052) and (org_code <> 161790);

		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	// Находит последнюю дату
	left join(cbm_bp) load
		org_code,
		Max(cbm_bp.Date) as cbm_bp.LastDate
	resident cbm_bp
	group by org_code;

	// Оставляет только записи за последнюю дату
	temp:
	noconcatenate load * resident cbm_bp where cbm_bp.Date = cbm_bp.LastDate;
	drop table cbm_bp;
	rename table temp to cbm_bp;
	drop field cbm_bp.Date, cbm_bp.LastDate;

	// Добавляет к таблице данные из таблицы оргкодов
	left join (cbm_bp) load 
		org_code,
		org_tb_code as cbm_bp.TBCode,
		org_gosb_code as cbm_bp.GOSBCode,
		org_tb_name as cbm_bp.TBName,
		org_gosb_name as cbm_bp.GOSBName
 	resident org;

	// Расчитывает значение перцентилей 0,75 и 0,25
	left join(cbm_bp) load 
		Fractile(cbm_bp.Deviations, 0.75) as cbm_bp.Percentile75,
		Fractile(cbm_bp.Deviations, 0.25) as cbm_bp.Percentile25
	resident cbm_bp;

	// Получает значение метрики 10000062
	temp:
	noconcatenate load *,
		10000062 as cbm_bp.MetricID,
		'Прогнозное критическое невыполнение показателей БП' as cbm_bp.MetricName,
		2 as cbm_bp.MetricDirection,
		0 as cbm_bp.MetricPlanValue,
		Null() as cbm_bp.ElementType, 
		Null() as cbm_bp.ElementID,
		'EXT_FILE' as cbm_bp.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_bp.ReportDate,
		'STUFF' as cbm_bp.StructLevel,
		'1) Граница боттом 25% - '&cbm_bp.Percentile75&' '&chr(13)&
			'2) Граница топ 25% - '&cbm_bp.Percentile25&' '&chr(13)&
			cbm_bp.Alert 
		as cbm_bp.DevElementName,
		cbm_bp.Deviations as cbm_bp.MetricValue,
		'10000062_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_bp.LoadID,
		'(Факт - <b>'&cbm_bp.Deviations&
			'</b>. Цель - меньше <b>'&cbm_bp.Percentile25&
			'</b>. Ориентир - меньше <b>'&cbm_bp.Percentile75&'</b>)' 
		as cbm_bp.ResultEvaluation,
		If((cbm_bp.Deviations > cbm_bp.Percentile75) and ((cbm_bp.Percentile25 <> 0) or (cbm_bp.Percentile75 <> 0)), 
			1, 
			If((cbm_bp.Deviations <= cbm_bp.Percentile25),
				13,
				0
			)
		) as cbm_bp.DeviationMarker
	resident cbm_bp;
	drop table cbm_bp;
	rename table temp to cbm_bp;

	// Сливает данные метрики с основной таблицей
	concatenate(cbm_data) load
		org_code,
		cbm_bp.TBCode as cbm.TBCode,
		cbm_bp.GOSBCode as cbm.GOSBCode,
		cbm_bp.TBName as cbm.TBName,
		cbm_bp.GOSBName as cbm.GOSBName,
		cbm_bp.MetricID as cbm.MetricID,
		cbm_bp.MetricName as cbm.MetricName,
		cbm_bp.MetricDirection as cbm.MetricDirection,
		cbm_bp.MetricPlanValue as cbm.MetricPlanValue,
		cbm_bp.ElementType as cbm.ElementType, 
		cbm_bp.ElementID as cbm.ElementID,
		cbm_bp.Segment as cbm.Segment,
		cbm_bp.ReportDate as cbm.ReportDate,
		cbm_bp.StructLevel as cbm.StructLevel,
		cbm_bp.DevElementName as cbm.DevElementName,
		cbm_bp.MetricValue as cbm.MetricValue,
		cbm_bp.ResultEvaluation as cbm.ResultEvaluation,
		cbm_bp.DeviationMarker as cbm.DeviationMarker,
		cbm_bp.LoadID as cbm.LoadID
	resident cbm_bp;
	drop table cbm_bp;

	////////////////////////////////////////////////////////////////////////////////
	// Инициативы ИИ-трансформации
	if '$(cbmConnection)' = '1' then
		//QVD
		cbm_ait_org:
		noconcatenate load * from [$(tasks_qvd)] (qvd);
		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	else
		//Excel
		cbm_ait_org:
		noconcatenate load * from [$(tasks_xl)] (ooxml, embedded labels, table is Sheet1);
		call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
		exit sub unless ETL_STEP_ERROR_CODE = 0;
	end if;

	// Таблица родителей
	cbm_ait_parent:
	noconcatenate load id as parent_id
	resident cbm_ait_org
	where (parent_id = 0) and (DIRECTION = 'ИИ-трансформация');

	// Добавляет таблицу родителей к оригинальной
	left join(cbm_ait_org) load
		parent_id,
		// Флаг наличия родительской задачи
		1 as is_matched
	resident cbm_ait_parent;
	drop table cbm_ait_parent;

	// Таблица инициатив
	cbm_ait:
	noconcatenate load
		tb_code&If(gosb_code = 0, '', If(gosb_code = 3838, 38, gosb_code)) as org_code,
		Date(Date#(control_date, 'DD-MM-YYYY')) as cbm_ait.ControlDate,
		Date(Date#(double_control_date, 'DD-MM-YYYY')) as cbm_ait.DoubleControlDate,
		If(IsNull(fact_end_date) or (fact_end_date = '') or (fact_end_date = '-'), 
			Date(Date#(Left(comment, 10), 'DD-MM-YYYY')),
			Date(fact_end_date)
		) as cbm_ait.FactEndDate,
		STATUS as cbm_ait.Status,
		title as cbm_ait.Title
	resident cbm_ait_org
	where (tb_code <> 38) and (gosb_code <> 9052) and (parent_id <> 0) and 
		(Upper(STATUS) <> 'ОТМЕНЕНА') and (DIRECTION = 'ИИ-трансформация') and not(IsNull(is_matched)) and 
		((title = 'Проведена дизайн-сессия') or 
			(title = 'Разработана дорожная карта по реализации утвержденных приоритетных идей') or 
			(title = 'Подписано соглашение или доп.соглашение по ИИ-трансформации на уровне руководства банка и региона')
		);
	drop table cbm_ait_org;

	// Множит имеющиеся записи Северного ГОСБ на все прочие ГОСБ МО
	// Выделяет записи Северного ГОСБ
	north_gosb:
	noconcatenate load * resident cbm_ait where org_code = '401026';
	// Для оставшихся трех ГОСБ МО
	for i = 3 to 5
		//Добавляет строки Северного ГОСБ в исходную таблицу с новым оргкодом
		concatenate(cbm_ait) load 
			cbm_ait.Title,
			cbm_ait.ControlDate,
			cbm_ait.DoubleControlDate,
			cbm_ait.FactEndDate,
			cbm_ait.Status,
			40102$(i) as org_code
		resident north_gosb;
	next i;
	//Удаляет таблицу Северного ГОСБ
	drop table north_gosb;

	// // Создает матрицу всех значений
	// cbm_ait_mtx:
	// noconcatenate load distinct cbm_ait.Title as title resident cbm_ait;
	// // Добавляет в матрицу оргкоды всех ГОСБ
	// join (cbm_ait_mtx) load distinct org_code resident org where not(IsNull(org_gosb_code));
	// // Добавляет матрицу в таблицу
	// concatenate (cbm_ait) load org_code, title as cbm_ait.Title resident cbm_ait_mtx;
	// drop table cbm_ait_mtx;

	// // Сливает таблицу по org_code, оставляя нули у отсутствующих в данных ГОСБ
	// temp:
	// noconcatenate load 
	// 	org_code,
	// 	cbm_ait.Title,
	// 	Date(Concat(cbm_ait.ControlDate, '')) as cbm_ait.ControlDate,
	// 	Date(Concat(cbm_ait.DoubleControlDate, '')) as cbm_ait.DoubleControlDate,
	// 	Date(Concat(cbm_ait.FactEndDate, '')) as cbm_ait.FactEndDate,
	// 	Concat(cbm_ait.Status, '') as cbm_ait.Status
	// resident cbm_ait
	// group by org_code, cbm_ait.Title;
	// drop table cbm_ait;
	// rename table temp to cbm_ait;

	// Добавляет к таблице данные из таблицы оргкодов
	left join (cbm_ait) load 
		org_code,
		org_tb_code as cbm_ait.TBCode,
		org_gosb_code as cbm_ait.GOSBCode,
		org_tb_name as cbm_ait.TBName,
		org_gosb_name as cbm_ait.GOSBName
 	resident org;
	drop table org;

	set cbmIs80thMetricFailed = (Upper(cbm_ait.Status) <> 'ЗАВЕРШЕНА') and 
		(AddMonths(cbm_ait.DoubleControlDate, 1) < Date(Floor($(cbmGetPrevMEnd))));

	// Получает значение метрик 10000080, 10000081, 10000082
	temp:
	noconcatenate load *,
			cbm_ait.MetricID&'_'&Date($(cbmGetPrevQStart), 'YYYYMMDD')&'_'&Date($(cbmGetPrevQEnd), 'YYYYMMDD') as cbm_ait.LoadID;
	noconcatenate load *,
		Pick(
			Match(cbm_ait.Title, 
				'Проведена дизайн-сессия', 
				'Разработана дорожная карта по реализации утвержденных приоритетных идей',
				'Подписано соглашение или доп.соглашение по ИИ-трансформации на уровне руководства банка и региона'
			), 10000080, 10000081, 10000082
		) as cbm_ait.MetricID,
		Pick(
			Match(cbm_ait.Title, 
				'Проведена дизайн-сессия', 
				'Разработана дорожная карта по реализации утвержденных приоритетных идей',
				'Подписано соглашение или доп.соглашение по ИИ-трансформации на уровне руководства банка и региона'
			), 'Дизайн-сессия с регионом', 'Дорожная карта', 'Соглашение с регионом'
		) as cbm_ait.MetricName,
		1 as cbm_ait.MetricDirection,
		1 as cbm_ait.MetricPlanValue,
		Null() as cbm_ait.ElementType, 
		Null() as cbm_ait.ElementID,
		'EXT_FILE' as cbm_ait.Segment,
		Date(Floor($(cbmGetPrevMEnd))) as cbm_ait.ReportDate,
		'STUFF' as cbm_ait.StructLevel,
		If(Upper(cbm_ait.Status) <> 'ЗАВЕРШЕНА',
			Pick(
				Match(cbm_ait.Title, 
					'Проведена дизайн-сессия', 
					'Разработана дорожная карта по реализации утвержденных приоритетных идей',
					'Подписано соглашение или доп.соглашение по ИИ-трансформации на уровне руководства банка и региона'
				), 'Плановая дата дизайн-сессии: ', 'Плановая дата формирования дорожной карты: ', 'Плановая дата подписания соглашения: '
			)&cbm_ait.DoubleControlDate,
			Pick(
				Match(cbm_ait.Title, 
					'Проведена дизайн-сессия', 
					'Разработана дорожная карта по реализации утвержденных приоритетных идей',
					'Подписано соглашение или доп.соглашение по ИИ-трансформации на уровне руководства банка и региона'
				), 'Проведена дизайн-сессия: ', 'Разработана дорожная карта: ', 'Подписано соглашение: '
			)&cbm_ait.FactEndDate
		) & If(cbm_ait.DoubleControlDate <> cbm_ait.ControlDate, '. Был изменен срок выполнения задачи', '') 
		as cbm_ait.DevElementName,
		If($(cbmIs80thMetricFailed), 0, 1) as cbm_ait.MetricValue,
		'(Отклонение <b>'&If($(cbmIs80thMetricFailed), '', 'не ')&'зафиксировано</b>)' as cbm_ait.ResultEvaluation,
		If($(cbmIs80thMetricFailed), 1, 0) as cbm_ait.DeviationMarker
	resident cbm_ait;
	drop table cbm_ait;
	rename table temp to cbm_ait;

	// Сливает данные метрики с основной таблицей
	concatenate(cbm_data) load
		org_code,
		cbm_ait.TBCode as cbm.TBCode,
		cbm_ait.GOSBCode as cbm.GOSBCode,
		cbm_ait.TBName as cbm.TBName,
		cbm_ait.GOSBName as cbm.GOSBName,
		cbm_ait.MetricID as cbm.MetricID,
		cbm_ait.MetricName as cbm.MetricName,
		cbm_ait.MetricDirection as cbm.MetricDirection,
		cbm_ait.MetricPlanValue as cbm.MetricPlanValue,
		cbm_ait.ElementType as cbm.ElementType, 
		cbm_ait.ElementID as cbm.ElementID,
		cbm_ait.Segment as cbm.Segment,
		cbm_ait.ReportDate as cbm.ReportDate,
		cbm_ait.StructLevel as cbm.StructLevel,
		cbm_ait.DevElementName as cbm.DevElementName,
		cbm_ait.MetricValue as cbm.MetricValue,
		cbm_ait.ResultEvaluation as cbm.ResultEvaluation,
		cbm_ait.DeviationMarker as cbm.DeviationMarker,
		cbm_ait.LoadID as cbm.LoadID
	resident cbm_ait;
	drop table cbm_ait;

	////////////////////////////////////////////////////////////////////////////////
	// Финальный шаблон метрик
	cbm_metrics_final_lookup:
	noconcatenate load * inline [
		cbm.MetricID, cbm.MetricShortName, cbm.Category
		10000018, Дост. КРП для вып. плана, Проекты
		10000019, PL КРП на след. год, Проекты
		10000020, Низкое кол-во идей КРП, Проекты
		10000096, Бизнес-эксперименты, Проекты
		10000021, Дост. PL продаж, Полка
		10000022, Неравн. плана продаж, Полка
		10000023, Низкая доход. продаж, Полка
		10000024, Низкая доля продаж, Полка
		10000025, Низкий прир. доли продаж, Полка
		10000035, Посещ. платф. ПРБР, Прочее
		10000050, Низ. дох. от AI, Прочее
		10000062, Прогноз невып. БП, Прочее
		10000001, Сниж. долей рынков, Прочее
		10000080, Дизайн-сессия с рег., Прочее
		10000081, Дорожная карта, Прочее
		10000082, Соглашение с рег., Прочее
		20000018, Посещ. платф. ПРБР, Прочее
  ];

	// Добавляет финальный шаблон к таблице
	left join(cbm_data) load
		cbm.MetricID,
		cbm.MetricShortName, 
		cbm.Category
	resident cbm_metrics_final_lookup;
	drop table cbm_metrics_final_lookup;

	// ////////////////////////////////////////////////////////////////////////////////
	// // Сохраняет данные в архив

	// // Дублирует основную таблицу, добавляя поле даты создания
	// cbm_data_store:
	// noconcatenate load *, Date(Floor(Today())) as cbm.CreateDate resident cbm_data;

	// // Добавляет к текушим данным старые из архива
	// concatenate(cbm_data_store) load *
	// from '$(data_dir)/cbm_data_store.qvd' (qvd)
	// where (cbm.CreateDate <> Date(Floor(Today())));
	// call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
	// exit sub unless ETL_STEP_ERROR_CODE = 0;

	// // Сохраняет архив вместе с новыми данными на диск раз в неделю по воскресеньям
	// if WeekDay(Today()) = 7 then 
	// 	store cbm_data_store into '$(data_dir)/cbm_data_store.qvd' (qvd);
	// 	call setStepError('$(#ScriptError)', '$(ScriptError)', ScriptErrorDetails);
	// 	exit sub unless ETL_STEP_ERROR_CODE = 0;
	// end if;
	// drop table cbm_data_store;

end sub;

//Создает переменные и выражения
sub cbmSetVariables
	//Переменные
	let vOrgCode = 99;

	// Дэшборд аггрегированных отклонений

	//Выборка текущего оргкода
	set cbmCurOrgCode = 
		^(=If(^(vOrgCode) = 99, 
			'org_code = {*}',
			If(Len('^(vOrgCode)') = 2, 
				'org_tb_code = {^(=Left('^(vOrgCode)', 2))}',
				'org_code = {^(vOrgCode)}'
			)
		));
	let cbmCurOrgCode = Replace(cbmCurOrgCode, '^', '$');

	//Организационный уровень: 1 - СБ, 2 - ТБ, 3 - ГОСБ
	set cbmOrgLevel = If('^(vOrgCode)' = '99', 1, If(Len('^(vOrgCode)') = 2, 2, 3));
	let cbmOrgLevel = Replace(cbmOrgLevel, '^','$');

	//Измерения
	//Сбербанк
	set cbmGetSberbank = If('^(vOrgCode)' = '99', 'Сбербанк', org_tb_name_short);
	let cbmGetSberbank = Replace(cbmGetSberbank, '^','$');
	set cbmSberbankCond = '^(vOrgCode)' = '99';
	let cbmSberbankCond = Replace(cbmSberbankCond, '^','$');
	set cbmSberbankClass = 'total';
	set cbmSberbankActionCond = '^(vOrgCode)' <> '99';
	let cbmSberbankActionCond = Replace(cbmSberbankActionCond, '^','$');

	//ТБ
	set cbmGetTB = 
		If('^(vOrgCode)' = '99', 
			org_tb_name_short,
			If(Left('^(vOrgCode)', 2) = org_tb_code,
				org_tb_name_short
			)
		);
	let cbmGetTB = Replace(cbmGetTB, '^','$');
	set cbmTBCond = Len('^(vOrgCode)') = 2;
	let cbmTBCond = Replace(cbmTBCond, '^','$');
	set cbmTBClass = If(('^(vOrgCode)' <> '99') and (Len('^(vOrgCode)') = 2), 'total');
	let cbmTBClass = Replace(cbmTBClass, '^','$');
	set cbmTBActionOrgCode = If(^(vOrgCode) = org_tb_code, 99, org_tb_code);
	let cbmTBActionOrgCode = Replace(cbmTBActionOrgCode, '^','$');

	//ГОСБ
	set cbmGetGOSB =
		// Кроме Москвы и Крыма
		If((org_code <> 3838) and (org_code <> 529052),
			If('^(vOrgCode)' = '99', 
				org_gosb_name_short,
				If(Len('^(vOrgCode)') = 2, 
					if(Left('^(vOrgCode)', 2) = org_tb_code, 
						org_gosb_name_short
					),
					If('^(vOrgCode)' = org_code, 
						org_gosb_name_short
					)
				)
			)
		);
	let cbmGetGOSB = Replace(cbmGetGOSB, '^','$');
	set cbmGOSBCond = ('^(vOrgCode)' <> '99');
	let cbmGOSBCond = Replace(cbmGOSBCond, '^','$');
	set cbmGOSBClass = If(Len('^(vOrgCode)') > 2, 'total');
	let cbmGOSBClass = Replace(cbmGOSBClass, '^','$');
	set cbmGOSBActionOrgCode = If(^(vOrgCode) = org_code, org_tb_code, org_code);
	let cbmGOSBActionOrgCode = Replace(cbmGOSBActionOrgCode, '^','$');
	set cbmFlatGOSBActionOrgCode = If(^(vOrgCode) = org_code, 99, org_code);
	let cbmFlatGOSBActionOrgCode = Replace(cbmFlatGOSBActionOrgCode, '^','$');

	// Мера
	set cbmGetDeviationsTitle = 'Отклонения';
	set cbmGetDeviationsNum = Sum(If((cbm.StructLevel = 'STUFF') and (cbm.DeviationMarker = 1), 1, 0));
	set cbmGetDeviationsColor = If(Dimensionality() > 1, ^(ggffGetReverseGradientColor(1)));
	let cbmGetDeviationsColor = Replace(cbmGetDeviationsColor, '^','$');

	// Дэшборд отклонений по метрике
	for mi = 15 to 35
		// В таблицу
		set cbmGet$(mi)MetricTitle = Only({<cbm.MetricID = {100000$(mi)}>} cbm.MetricShortName);
		set cbmGet$(mi)Value = Only({<cbm.MetricID = {100000$(mi)}>} cbm.MetricValue);
		set cbmGet$(mi)MetricValue =
			If(Dimensionality() = 0,
				Sum(Aggr(If(Only({<cbm.MetricID = {100000$(mi)}>} cbm.DeviationMarker) = 1, 1, 0), org_gosb_code)), 
				Pick(Match($(mi), 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35) + 1, 
					$(ggffDash), 
					Num(^(cbmGet$(mi)Value), '$(ggffPCT)'),
					Num(^(cbmGet$(mi)Value), '$(ggffNUM)')&' шт.',
					Num(^(cbmGet$(mi)Value), '$(ggffPCT)'),
					Num(^(cbmGet$(mi)Value), '$(ggffPCT)'),
					Num(^(cbmGet$(mi)Value), '$(ggffPCT)'),
					Num(^(cbmGet$(mi)Value), '$(ggffPCT)'),
					Num(^(cbmGet$(mi)Value), '$(ggffPCD)'),
					Num(^(cbmGet$(mi)Value) / 1000000, '$(ggffNUH)')&' млн р',
					Num(^(cbmGet$(mi)Value), '$(ggffPCD)'),
					Num(^(cbmGet$(mi)Value), '$(ggffPCD)'),
					Interval(^(cbmGet$(mi)Value)/(3600*24),'h:mm:ss')
				)
			);
		let cbmGet$(mi)MetricValue = Replace(cbmGet$(mi)MetricValue, '^','$');
		set cbmGet$(mi)MetricValueColor = 
			If(Dimensionality() <> 0,
				Pick(
					Match(Only({<cbm.MetricID = {100000$(mi)}>} cbm.DeviationMarker), 1, 0, 13) + 1,
						'$(ggffGrey)', '$(ggffRed)', '$(ggffGreen)', '$(ggffBlue)'
				)
			);
		set cbmGet$(mi)MetricValueTextColor = 0;
		// В подвал
		set cbmGet$(mi)MetricFullTitle = Only({<cbm.MetricID = {100000$(mi)}>} cbm.MetricName);
		set cbmGet$(mi)MetricFullValue = Only({<^(cbmCurOrgCode), cbm.MetricID = {100000$(mi)}>} cbm.ResultEvaluation);
		let cbmGet$(mi)MetricFullValue = Replace(cbmGet$(mi)MetricFullValue, '^','$');
		set cbmGet$(mi)DevElementName = 
			Only({<^(cbmCurOrgCode), cbm.StructLevel = {'STUFF'}, cbm.MetricID = {100000$(mi)}>} cbm.DevElementName);
		let cbmGet$(mi)DevElementName = Replace(cbmGet$(mi)DevElementName, '^','$');
	next mi;
	// Вес шрифта для итого
	set cbmGetTotalWeight = If(Dimensionality() = 0, '800', '');
	// Список комментариев
	set cbmGetComments = 
		'<p><b>'&^(cbmGet15MetricFullTitle)&'</b> '&^(cbmGet15DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet16MetricFullTitle)&'</b> '&^(cbmGet16DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet17MetricFullTitle)&'</b> '&^(cbmGet17DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet18MetricFullTitle)&'</b> '&^(cbmGet18DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet19MetricFullTitle)&'</b> '&^(cbmGet19DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet21MetricFullTitle)&'</b> '&^(cbmGet21DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet22MetricFullTitle)&'</b> '&^(cbmGet22DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet23MetricFullTitle)&'</b> '&^(cbmGet23DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet24MetricFullTitle)&'</b> '&^(cbmGet24DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet25MetricFullTitle)&'</b> '&^(cbmGet25DevElementName)&'</p>';
	let cbmGetComments = Replace(cbmGetComments, '^','$');
	// Список комментариев
	set cbmGetProjectComments = 
		'<p style="font-size: 20px; font-weight: 800; ">Проекты</p>'&
		'<p><b>'&^(cbmGet15MetricFullTitle)&'</b> '&^(cbmGet15MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet15DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet16MetricFullTitle)&'</b> '&^(cbmGet16MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet16DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet17MetricFullTitle)&'</b> '&^(cbmGet17MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet17DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet18MetricFullTitle)&'</b> '&^(cbmGet18MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet18DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet19MetricFullTitle)&'</b> '&^(cbmGet19MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet19DevElementName)&'</p>';
	let cbmGetProjectComments = Replace(cbmGetProjectComments, '^','$');
	// Список комментариев
	set cbmGetProductComments = 
		'<p style="font-size: 20px; font-weight: 800; ">Полка</p>'&
		'<p><b>'&^(cbmGet21MetricFullTitle)&'</b> '&^(cbmGet21MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet21DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet22MetricFullTitle)&'</b> '&^(cbmGet22MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet22DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet23MetricFullTitle)&'</b> '&^(cbmGet23MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet23DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet24MetricFullTitle)&'</b> '&^(cbmGet24MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet24DevElementName)&'</p>'&
		'<p><b>'&^(cbmGet25MetricFullTitle)&'</b> '&^(cbmGet25MetricFullValue)&'</p><p style="margin-left: 20px; ">'&^(cbmGet25DevElementName)&'</p>';
	let cbmGetProductComments = Replace(cbmGetProductComments, '^','$');
	// Количество отклонений по проектам
	set cbmGetProjectsDeviationsTitle = 'Отклонений по проектам';
	set cbmGetGOSBProjectsDeviationsNum = Count({<cbm.Category = {'Проекты'}, cbm.DeviationMarker = {1}>} distinct cbm.MetricName);
	set cbmGetTBProjectsDeviationsNum = Sum(Aggr(Count({<cbm.Category = {'Проекты'}, cbm.DeviationMarker = {1}>} distinct cbm.MetricName), org_gosb_code));
	set cbmGetProjectsDeviationsNum = If(Dimensionality() <> 0, ^(cbmGetGOSBProjectsDeviationsNum), ^(cbmGetTBProjectsDeviationsNum));
	let cbmGetProjectsDeviationsNum = Replace(cbmGetProjectsDeviationsNum, '^','$');
	// Ранг отклонений по проектам
	set cbmGetGOSBProjectsDeviationsRank = Rank(Aggr(^(cbmGetGOSBProjectsDeviationsNum), org_gosb_code), 1, 1);
	let cbmGetGOSBProjectsDeviationsRank = Replace(cbmGetGOSBProjectsDeviationsRank, '^','$');
	set cbmGetTBProjectsDeviationsRank = Rank(Aggr(^(cbmGetTBProjectsDeviationsNum), org_gosb_code, org_tb_code), 1, 1);
	let cbmGetTBProjectsDeviationsRank = Replace(cbmGetTBProjectsDeviationsRank, '^','$');
	set cbmGetProjectsDeviationsRank = If(Dimensionality() <> 0, ^(cbmGetGOSBProjectsDeviationsRank), ^(cbmGetTBProjectsDeviationsRank));
	let cbmGetProjectsDeviationsRank = Replace(cbmGetProjectsDeviationsRank, '^','$');
	// Количество отклонений по полке
	set cbmGetProductsDeviationsTitle = 'Отклонений по полке';
	set cbmGetGOSBProductsDeviationsNum = Count({<cbm.Category = {'Полка'}, cbm.DeviationMarker = {1}>} distinct cbm.MetricName);
	set cbmGetTBProductsDeviationsNum = Sum(Aggr(Count({<cbm.Category = {'Полка'}, cbm.DeviationMarker = {1}>} distinct cbm.MetricName), org_gosb_code));
	set cbmGetProductsDeviationsNum = If(Dimensionality() <> 0, ^(cbmGetGOSBProductsDeviationsNum), ^(cbmGetTBProductsDeviationsNum));
	let cbmGetProductsDeviationsNum = Replace(cbmGetProductsDeviationsNum, '^','$');
	// Ранг отклонений по полке
	set cbmGetGOSBProductsDeviationsRank = Rank(Aggr(^(cbmGetGOSBProductsDeviationsNum), org_gosb_code), 1, 1);
	let cbmGetGOSBProductsDeviationsRank = Replace(cbmGetGOSBProductsDeviationsRank, '^','$');
	set cbmGetTBProductsDeviationsRank = Rank(Aggr(^(cbmGetTBProductsDeviationsNum), org_gosb_code, org_tb_code), 1, 1);
	let cbmGetTBProductsDeviationsRank = Replace(cbmGetTBProductsDeviationsRank, '^','$');
	set cbmGetProductsDeviationsRank = If(Dimensionality() <> 0, ^(cbmGetGOSBProductsDeviationsRank), ^(cbmGetTBProductsDeviationsRank));
	let cbmGetProductsDeviationsRank = Replace(cbmGetProductsDeviationsRank, '^','$');
	
	// Количество отклонений всего
	set cbmGetTotalDeviationsTitle = 'Отклонений всего';
	set cbmGetTotalDeviationsNum = Column(7) + Column(13);
	// Сортировка ГОСБ
	set cbmGetGOSBOrder = ^(cbmGetProjectsDeviationsNum) + ^(cbmGetProductsDeviationsNum);
	let cbmGetGOSBOrder = Replace(cbmGetGOSBOrder, '^','$');
	
end sub;